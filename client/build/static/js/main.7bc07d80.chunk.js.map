{"version":3,"sources":["styles/colors.js","styles/GlobalStyles.js","components/Context/AnalysisContext.js","components/FormUpload/FormUpload.js","styles/TableStyle.js","components/Analysis/AnalysisTable.js","components/utils/FixedPoint.js","components/Analysis/ModelStatsTable.js","components/Analysis/BatchStatsTable.js","components/DownloadButton/DownloadButton.js","components/GrowthCurve/TumorGrowthCurve.js","components/Analysis/Analysis.js","components/utils/Loading.js","components/Home/Home.js","components/Documentation/Documentation.js","App.js","index.js","images/download1.svg","images/bg.png","images/logo.png","images/input.png","images/stats.png","images/model.png","images/graph.png"],"names":["GlobalStyles","createGlobalStyle","colors","bgImg","analysisContext","React","createContext","StyledForm","styled","div","StyledReader","StyleLink","normalVolume","vol_array","value","i","UploadForm","useState","csvFile","setCsvFile","fileRef","useRef","useContext","AnalysisContext","analysisState","setAnalysisState","error","summary","exampleFile","setExampleFile","useEffect","readRemoteFile","download","complete","results","data","onSubmit","e","preventDefault","loading","FormData","append","axios","post","then","res","catch","err","response","status","message","handleOnDrop","file","isDrop","undefined","modifiedData","output","volume_zero","forEach","row","time","count","row_data","j","pdx_json","push","batch","Number","volume","volume_normal","model","exp_type","pdx_points","times","volumes","volume_normals","match","drug","toLowerCase","processData","getExampleData","example","className","ref","onDrop","onError","console","log","addRemoveButton","onRemoveFile","style","borderWidth","filename","type","disabled","onClick","exampleSummary1","exampleSummary2","TableWrapper","StyledCollapsible","StyledLink","reactTable","columns","TheadComponent","defaultPageSize","length","filterable","showPagination","getTrProps","state","rowInfo","fontWeight","original","name","color","AnalysisTable","props","src","downloadIcon","alt","trigger","display","renderOutput","FixedPoint","number","toFixed","Header","accessor","minWidth","ModelStatsTable","tableData","newData","Object","keys","auc","val","AUC","auc_control","JSON","parse","stringify","split","map","replace","mRECIST","mRECIST_control","element","values","k","best_avg_response","best_avg_response_control","bar","z","lm_slopes_control","lm_slopes","slope","parseData","some","unshift","key","calculateEstimate","object","SD","PR","PD","CR","max","max_array","entries","join","calcResponse","auc_gp","auc_gp_control","calculateResponder","kl_p_value","responder_from_AUC","responder_from_response_angle","tgi","countPD","dataMid","estimate","toExponential","responder","BatchStatsTable","StyledButton","DownloadButton","componentRef","exportComponentAsPNG","createToolTip","d","tooltip","tooltipDiv","d3","pageX","pageY","tooltipData","selectAll","enter","attr","html","plotMeans","svg","xrange","yrange","isNormal","isErrorBar","isPlotMean","timeUnion","control","treatment","Set","sort","a","b","getUnionOfTimepoints","expTypes","shift","pop","newVolumeControl","newVolumeTreatment","oldVolume","oldTime","timeUnionData","newVolume","totalVolume","minVol","maxVol","current","volumeObject","n","exp","exptype","typeNumber","meanVolume","yStandardError","deviation","Math","sqrt","meanVolumeError","meanSvg","meanPath","linepath","x","y","errorBars","plotErrorBars","plotBatch","graph","norm","models","paths","createLine","stroke","opacity","tableSelect","tcolor","tback","acolor","aback","on","remove","classed","selectedCurve","selection","ctrlKey","metaKey","nodes","attributes","classList","contains","previousSelection","volumeToggle","width","height","maxVolume","maxVolNorm","minVolNorm","isNormalized","calculateNormalizedRange","minimum","maximum","calcMinMax","domain","range","nice","additionalHeight","id","rawToggle","normToggle","allToggle","errorToggle","text","extraWidth","extraHeight","rect","createReactangle","checkIfNormalized","yAxis","scale","tickPadding","call","select","TumorGrowthCurve","minmax","maxTimeArray","minTimeArray","minVolArray","maxVolArray","maxVolNormArray","minVolNormArray","minTime","apply","maxTime","minVolume","min","calculateMinMax","curve","plotId","margin","legend","xAxis","tumorCurve","float","StyledAnalysis","Analysis","patientParam","drugParam","StyledContainer","LoadingComponent","Home","to","Provider","href","target","rel","logo","FormUpload","Loading","StyledDocumentation","outputDescription","KuLGaP","TGI","Angle","Documentation","input","stats","App","ReactGA","initialize","pageview","window","location","pathname","search","path","exact","component","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"yQAAe,EACL,UADK,EAEF,UAFE,EAKD,UALC,EAMF,UANE,EAOA,UAPA,EAQC,U,+0FCJhB,IAgIeA,EAhIMC,4BAAH,IAODC,EAyBSA,EAYDA,EAwERC,K,iDCpHFC,EAFSC,IAAMC,gB,ujECW9B,IAAMC,EAAaC,UAAOC,IAAV,IACQP,EAWPA,EAeKA,EAaDA,GAYfQ,EAAeF,UAAOC,IAAV,IACAP,EAQDA,EAQIA,EAKWA,GAO1BS,EAAYH,UAAOC,IAAV,IAGEP,EAGIA,GAOfU,EAAe,SAACC,EAAWC,EAAOC,GAAnB,OAA0BD,EAAQD,EAAUE,IAAOF,EAAUE,IA8KnEC,EAvHI,WAAO,IAAD,EACSC,mBAAS,MADlB,mBACdC,EADc,KACLC,EADK,KAEfC,EAAUC,iBAAO,MAFF,EAGuBC,qBAAWC,GAA/CC,EAHa,EAGbA,cAAeC,EAHF,EAGEA,iBACfC,EAAmBF,EAAnBE,MAJa,GAIMF,EAAZG,QACuBV,mBAAS,KAL1B,mBAKdW,EALc,KAKDC,EALC,KAQrBC,qBAAU,WACNC,YAAe,cAAe,CAC1BC,UAAU,EACVC,SAAU,SAACC,GACPL,EAAeK,EAAQC,WAGhC,IAGH,IAAMC,EAAW,SAACC,GAEd,GADAA,EAAEC,iBACEpB,EAAS,CACTO,EAAiB,2BACVD,GADS,IACMe,SAAS,EAAMZ,QAAS,KAAMD,MAAO,QAE3D,IAAMS,EAAO,IAAIK,SACjBL,EAAKM,OAAO,OAAQvB,GACpBwB,IAAMC,KAAK,cAAeR,EAAM,IAC3BS,MAAK,SAACC,GAEHpB,EAAiB,2BACVD,GADS,IACMG,QAASkB,EAAIV,KAAK,GAAII,SAAS,QAGxDO,OAAM,SAACC,GAEJ,GAAIA,EAAIC,SAASC,QAAU,IAAK,CAAC,IACrBC,EAAYH,EAAIC,SAASb,KAAzBe,QACRzB,EAAiB,2BACVD,GADS,IACMe,SAAS,EAAOb,MAAOwB,UAG7CzB,EAAiB,2BACVD,GADS,IACMe,SAAS,EAAOb,MAAO,+BAO3DyB,EAAe,SAAChB,EAAMiB,EAAMzB,EAAS0B,QAE1BC,IAATF,GACAjC,EAAWiC,GAGf,IAAMG,EA3GM,SAACpB,EAAMkB,GACvB,IAAMG,EAAS,GACXC,EAAc,GA+ClB,OA9CAtB,EAAKuB,SAAQ,SAACC,EAAK5C,GACf,GAAKA,EAkBE,CACH,IAAI6C,EAAO,EACPC,EAAQ,EACNC,EAAWT,EAASM,EAAIxB,KAAOwB,EAC3B,IAAN5C,IACA0C,EAAcK,GAElBA,EAASJ,SAAQ,SAAC5C,EAAOiD,GAChBA,EAEgB,KAAVjD,IACP0C,EAAOK,GAAOG,SAASC,KAAK,CACxBC,MAAO,UACPN,KAAMO,OAAOP,GACbQ,OAAQD,OAAOrD,GACfuD,cAAezD,EAAa6C,EAAa3C,EAAOiD,GAChDO,MAAOd,EAAOK,GAAOS,MACrBC,SAAUf,EAAOK,GAAOU,WAE5Bf,EAAOK,GAAOW,WAAW,GAAGC,MAAMR,KAAKE,OAAOP,IAC9CJ,EAAOK,GAAOW,WAAW,GAAGE,QAAQT,KAAKE,OAAOrD,IAChD0C,EAAOK,GAAOW,WAAW,GAAGG,eAAeV,KAAKrD,EAAa6C,EAAa3C,EAAOiD,IACjFF,KAbAD,EAAOO,OAAOrD,UA3BlB,EACauC,EAASM,EAAIxB,KAAOwB,GAC5BD,SAAQ,SAAC5C,EAAOiD,GACjBjD,EAAM8D,MAAM,yBACZpB,EAAOS,KAAK,CACRC,MAAO,UACPW,KAAgB,YAAV/D,EAAsB,QAAU,UACtCyD,SAAUzD,EAAMgE,cAChBR,MAAM,UAAD,OAAYP,GACjBC,SAAU,GACVQ,WAAY,CAAC,CACTC,MAAO,GACPC,QAAS,GACTC,eAAgB,cAgCjCnB,EA0DkBuB,CAAY5C,EAAMkB,GAEvC5B,EAAiB,2BACVD,GADS,IAEZG,UACAQ,KAAMoB,MAcRyB,EAAiB,SAAC5B,EAAM6B,GAC1BlD,YAAeqB,EAAM,CACjBpB,UAAU,EACVC,SAAU,SAACC,GAGPiB,EAAajB,EAAQC,KAAM,KAAM8C,GAAS,OAKtD,OACI,kBAAC1E,EAAD,KACI,0BAAM2E,UAAU,cAAc9C,SAAUA,GACpC,kBAAC1B,EAAD,KACI,kBAAC,IAAD,CACIyE,IAAK/D,EAGLgE,OAAQ,SAACjD,EAAMiB,GAAP,OAAgBD,EAAahB,EAAMiB,EAAM,MAAM,IACvDiC,QA9BE,SAACtC,GACnBuC,QAAQC,IAAIxC,GACZ5B,EAAW,OA6BKqE,iBAAe,EACfC,aA3BO,WACvBtE,EAAW,OA2BKuE,MAAO,CAAEC,YAAa,mBAEtB,qDAGR,kBAAChF,EAAD,KACI,kBAAC,UAAD,CACIwB,KAAMP,EACNgE,SAAS,eAFb,4BAOJ,4BAAQC,KAAK,SAASzD,SAAUA,EAAU0D,UAAW5E,EAASgE,UAAYhE,EAAuB,KAAb,YAApF,WACA,4BAAQ2E,KAAK,SAASE,QAAS,kBAAMf,EAAe,cAAegB,KAAnE,SACA,4BAAQH,KAAK,SAASE,QAAS,kBAAMf,EAAe,qBAAsBiB,KAA1E,UAEHvE,EAAQ,uBAAGwD,UAAU,SAASxD,GAAa,O,2wDCjRxD,IAuEewE,EAvEM1F,UAAOC,IAAV,IAIAP,EAwBgBA,EACEA,EAEGA,EAKrBA,EAOAA,EAGmBA,EAKjBA,EAMQA,EAIXA,EAMAA,G,s+BC3DjB,IAAMiG,EAAoB3F,UAAOC,IAAV,IAENP,EAQIA,GAMfkG,EAAa5F,UAAOC,IAAV,IAWYP,EAQXA,EACWA,GAItBmG,EAAa,SAAClE,EAAMmE,EAAST,EAAMU,GAAtB,OACf,kBAAC,IAAD,CACIpE,KAAMA,EACNmE,QAASA,EACTE,gBAA0B,UAATX,EAAmB,GAAK1D,EAAKsE,OAC9CvB,UAAU,aACVwB,WAAqB,UAATb,EACZc,eAAyB,UAATd,EAChBU,eAAgBA,EAChBK,WAAY,SAACC,EAAOC,GAChB,OAAIA,EACO,CACHpB,MAAO,CACHqB,WAC8B,WAA1BD,EAAQE,SAASC,KACX,MACA,SACVC,MAC8B,WAA1BJ,EAAQE,SAASC,KAAjB,UACS/G,GADT,UAESA,KAIlB,OA0DJiH,EArBO,SAAAC,GAAU,IACpBjF,EAAwCiF,EAAxCjF,KAAMmE,EAAkCc,EAAlCd,QAAST,EAAyBuB,EAAzBvB,KAAMU,EAAmBa,EAAnBb,eAC7B,OACI,kBAAC,EAAD,KAnCa,SAACpE,EAAMmE,EAAST,EAAMU,GACvC,MAAa,UAATV,EAEI,oCACI,kBAACO,EAAD,KACI,kBAAC,UAAD,CAASjE,KAAMA,EAAMyD,SAAS,aAA9B,sBAEI,yBAAKyB,IAAKC,IAAcC,IAAI,qBAGpC,kBAACpB,EAAD,KACI,kBAAC,IAAD,CAAaqB,QAAQ,+BAChBnB,EAAWlE,EAAMmE,EAAST,EAAMU,MAOjD,6BACI,wBAAIb,MAAO,CAAE+B,QAAS,iBAAtB,gBACA,kBAACrB,EAAD,KACI,kBAAC,UAAD,CAASjE,KAAMA,EAAMyD,SAAS,aAA9B,sBAEI,yBAAKyB,IAAKC,IAAcC,IAAI,qBAGnClB,EAAWlE,EAAMmE,EAAST,EAAMU,IAShCmB,CAAavF,EAAMmE,EAAST,EAAMU,KClHhCoB,EAFI,SAACC,GAAD,OAAYzD,OAAOyD,GAAQC,QAAQ,ICIhDvB,GAAU,CACZ,CACIwB,OAAQ,OACRC,SAAU,OACVC,SAAU,KAEd,CACIF,OAAQ,UACRC,SAAU,UACVC,SAAU,KAEd,CACIF,OAAQ,wBACRC,SAAU,MACVC,SAAU,KAEd,CACIF,OAAQ,QACRC,SAAU,QACVC,SAAU,KAEd,CACIF,OAAQ,MACRC,SAAU,MACVC,SAAU,MA0EHC,GAbS,SAAC,GAAc,IAC7BC,EAtDQ,SAAC/F,GACf,IACmBrB,EADbqH,EAAU,GAGhBC,OAAOC,KAAKlG,EAAKmG,KAAK5E,SAAQ,SAAC6E,GAC3B,IAAMD,EAAMX,EAAWxF,EAAKmG,IAAIC,IAChCJ,EAAQlE,KAAK,CACTuE,IAAKF,EACLzD,KAAM1C,EAAK0C,KACXP,MAAO,gBAPIxD,EAWTqB,EAAKsG,YAXcC,KAAKC,MAAMD,KAAKE,UAAU9H,IAAQ+H,MAAM,KAAKC,KAAI,SAACP,GAAD,OAASA,EAAIQ,QAAQ,WAAY,QAWnFrF,SAAQ,SAAC6E,GACjCJ,EAAQlE,KAAK,CACTuE,IAAKb,EAAWY,GAChB1D,KAAM,UACNP,MAAO,eAIf,IAAIP,EAAI,EACR,CAACqE,OAAOC,KAAKlG,EAAK6G,SAAUZ,OAAOC,KAAKlG,EAAK8G,kBAAkBvF,SAAQ,SAACwF,EAASnI,GAC7EmI,EAAQxF,SAAQ,SAAC6E,GACb,IAAMY,EAASpI,EAAIoB,EAAK8G,gBAAgBV,GAAOpG,EAAK6G,QAAQT,GAC5DJ,EAAQpE,GAAGiF,QAAUG,EAAOJ,QAAQ,IAAK,IACzChF,UAIR,IAAIqF,EAAI,EACR,CAACjH,EAAKkH,kBAAmBlH,EAAKmH,2BAA2B5F,SAAQ,SAACwF,GAC9DA,EAAQxF,SAAQ,SAAC6E,GACTJ,EAAQiB,KACRjB,EAAQiB,GAAGG,IAAM5B,EAAWY,GAC5Ba,WAMZ,IAAII,EAAI,EASR,MARA,CAACrH,EAAKsH,kBAAmBtH,EAAKuH,WAAWhG,SAAQ,SAACwF,GAC9CA,EAAQxF,SAAQ,SAAC6E,GACTJ,EAAQqB,KACRrB,EAAQqB,GAAGG,MAAQhC,EAAWY,GAC9BiB,WAILrB,EAIWyB,CADgB,EAAXzH,MAUvB,OAPI+F,EAAU2B,MAAK,SAAClG,GAAD,MAAuB,YAAdA,EAAIW,UAC5BgC,GAAQwD,QAAQ,CACZhC,OAAQ,QACRC,SAAU,QACVC,SAAU,MAGV,kBAAC,EAAD,CAAe7F,KAAM+F,EAAW5B,QAASA,GAAST,KAAK,W,SC9F7DS,GAAU,CACZ,CACIwB,OAAQ,OACRC,SAAU,QAEd,CACID,OAAQ,WACRC,SAAU,YAEd,CACID,OAAQ,UACRC,SAAU,WAEd,CACID,OAAQ,YACRC,SAAU,cAIZoB,GAAS,CACX,CACIY,IAAK,KACLjJ,MAAO,UAEX,CACIiJ,IAAK,MACLjJ,MAAO,OAEX,CACIiJ,IAAK,gBACLjJ,MAAO,SAEX,CACIiJ,IAAK,UACLjJ,MAAO,WAEX,CACIiJ,IAAK,MACLjJ,MAAO,QAsCTkJ,GAAoB,SAACC,EAAQ9H,GAC/B,MAAqB,YAAjB8H,EAAOnJ,MA9BM,SAAAqB,GACjB,IAAM0B,EAAQ,CACVqG,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,GAEJC,EAAM,EACNC,EAAY,GAahB,OAZAnC,OAAOoC,QAAQrI,EAAK6G,SAAStF,SAAQ,SAAA6E,GACjC1E,EAAM0E,EAAI,GAAGQ,QAAQ,IAAK,MAAQ,KAEtCX,OAAOoC,QAAQ3G,GAAOH,SAAQ,SAAA6E,GACtBA,EAAI,GAAK+B,IACTC,EAAY,IACFtG,KAAKsE,EAAI,IACnB+B,EAAM/B,EAAI,IACHA,EAAI,KAAO+B,GAClBC,EAAUtG,KAAKsE,EAAI,OAGpBgC,EAAUE,KAAK,KAUXC,CAAavI,GAEH,QAAjB8H,EAAOnJ,MACA6G,EAAWxF,EAAKwI,OAASxI,EAAKyI,gBAElCjD,EAAWxF,EAAK8H,EAAOF,OAS5Bc,GAAqB,SAACd,EAAK5H,GAC7B,GAAY,OAAR4H,EACA,OAAO5H,EAAK2I,WAAa,IAAO,MAAQ,KACrC,GAAY,QAARf,EACP,OAAmC,IAA5B5H,EAAK4I,mBAA8B,MAAQ,KAC/C,GAAY,kBAARhB,EACP,OAA8C,IAAvC5H,EAAK6I,8BAAyC,MAAQ,KAC1D,GAAY,QAARjB,EACP,OAAO5H,EAAK8I,IAAM,GAAM,MAAQ,KAC7B,GAAY,YAARlB,EAAmB,CAC1B,IAAMmB,EAAU,EACVC,EAAU/C,OAAOC,KAAKlG,EAAK8G,iBAAiBxC,OAAS,EAM3D,OALA2B,OAAOe,OAAOhH,EAAK8G,iBAAiBvF,SAAQ,SAAAb,GAC5B,OAARA,IACAqI,IAAO,wBAAI,OAGZA,EAAUC,EAAU,MAAQ,OAIrCvB,GAAY,SAAAzH,GAAI,OAClBgH,GAAOL,KAAI,SAAAmB,GACP,MAAO,CACHhD,KAAMgD,EAAOnJ,MACbsK,SAAUpB,GAAkBC,EAAQ9H,GACpC,UACmB,OAAf8H,EAAOF,IAAe5H,EAAK2I,WAAWO,cAAc,GAAK,GAC7DC,UAAWT,GAAmBZ,EAAOF,IAAK5H,QAQvCoJ,GAJS,SAAC,GAAD,IAAGpJ,EAAH,EAAGA,KAAH,OACpB,kBAAC,EAAD,CAAeA,KAAMyH,GAAUzH,GAAOmE,QAASA,GAAST,KAAK,W,mrBC5HjE,IAAM2F,GAAehL,UAAOC,IAAV,KAOQP,EASTA,EACWA,GAuBbuL,GAZQ,SAACrE,GAAW,IACvBsE,EAAiBtE,EAAjBsE,aACR,OACI,kBAACF,GAAD,KACI,4BAAQzF,QAAS,kBAAM4F,gCAAqBD,IAAe7F,KAAK,UAAhE,gBAEI,yBAAKwB,IAAKC,IAAcC,IAAI,qBCbtCqE,GAAgB,SAACC,EAAGhG,EAAMiG,GAE5BA,EACKpG,MAAM,aAAc,WAIzB,IAAMqG,EAAaD,EACdpG,MAAM,OADQ,UACGsG,KAASC,MAAQ,GADpB,OAEdvG,MAAM,MAFQ,UAEEsG,KAASE,MAAQ,GAFnB,OAGdxG,MAAM,QAAS,WACfA,MAAM,mBAAoB,WAG3ByG,EAAc,GACL,SAATtG,EACAsG,EAAc,CAAC,UAAD,OACAN,EAAEvH,OADF,gBACoBuH,EAAEhH,MADtB,gBACuCgH,EAAEtH,UADzC,iBAC+DsH,EAAE3H,QAE/D,QAAT2B,IACPsG,EAAc,CAAC,SAAD,OACDN,EAAEjI,KADD,2BACyBiI,EAAEzH,OAD3B,aAKlB2H,EAAWK,UAAU,WAChBjK,KAAKgK,GACLE,QACA5J,OAAO,OACP6J,KAAK,KAAM,eACXC,MAAK,SAACV,GACH,IAAM1J,EAAO0J,EAAEhD,MAAM,KACrB,MAAM,MAAN,OAAa1G,EAAK,GAAlB,iBAA6BA,EAAK,OAErCmK,KAAK,IATV,UASkBN,KAASC,MAAQ,GATnC,OAUKK,KAAK,KAAK,SAACT,EAAG9K,GAAJ,gBAAciL,KAASE,MAAQ,GAAS,GAAJnL,EAApC,UAiUbyL,GAAY,SAACrK,EAAMsK,EAAKC,EAAQC,EAAQC,EAAUC,EAAYC,GAEhE,IAAMC,EA9RmB,SAAC5K,GAI1B,IAHA,IAAI6K,EAAU,GACVC,EAAY,GAEPlM,EAAI,EAAGA,EAAIoB,EAAKsE,OAAQ1F,IAC7B,GAAyB,YAArBoB,EAAKpB,GAAGwD,SAAwB,CAChC,IAAMX,EAAOzB,EAAKpB,GAAGyD,WAAW,GAAGC,MACnCuI,EAAO,uBAAOA,GAAP,aAAmBpJ,SACvB,GAAyB,cAArBzB,EAAKpB,GAAGwD,SAA0B,CACzC,IAAMX,EAAOzB,EAAKpB,GAAGyD,WAAW,GAAGC,MACnCwI,EAAS,uBAAOA,GAAP,aAAqBrJ,IAStC,MAAO,CAJe,aAAI,IAAIsJ,IAAIF,IAAUG,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KACvC,aAAI,IAAIH,IAAID,IAAYE,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,MA8QjDC,CAAqBnL,GACnCoL,EAAW,GACPrJ,EAAU/B,EAAK,GAAf+B,MAGoB,IAAxB6I,EAAU,GAAGtG,QACb8G,EAAW,CAAC,aACZR,EAAUS,SACqB,IAAxBT,EAAU,GAAGtG,QACpB8G,EAAW,CAAC,WACZR,EAAUU,OAEVF,EAAW,CAAC,UAAW,aAI3B,IAAMG,EAAmB,GACnBC,EAAqB,GAE3BxL,EAAKuB,SAAQ,SAAC6E,IA1RG,SAACxH,EAAG6M,EAAWC,EAASzJ,EAAQ0J,GACjD,IAAMC,EAAY3J,EACdoF,EAAIzI,EACR+M,EAAcpK,SAAQ,SAACE,GACnB,GAAKA,IAASiK,EAAQrE,IAAQuE,EAAUnK,IASjC,GAAKA,IAASiK,EAAQrE,IAAOuE,EAAUnK,GAC1CmK,EAAUnK,GAAMoK,aAAeJ,EAAUpE,GACzCuE,EAAUnK,GAAMgE,QAAU,EAC1BmG,EAAUnK,GAAMqK,OAASF,EAAUnK,GAAMqK,OAASL,EAAUpE,GAAKoE,EAAUpE,GAAKuE,EAAUnK,GAAMqK,OAChGF,EAAUnK,GAAMsK,OAASH,EAAUnK,GAAMsK,OAASN,EAAUpE,GAAKoE,EAAUpE,GAAKuE,EAAUnK,GAAMsK,OAChGH,EAAUnK,GAAMQ,OAAOH,KAAK2J,EAAUpE,IACtCA,SACG,GAAIqE,EAAQrE,GAAI,CACnB,IAAM2E,EAAUP,EAAUpE,EAAI,IAAOoE,EAAUpE,GAAKoE,EAAUpE,EAAI,KAAOqE,EAAQrE,GAAKqE,EAAQrE,EAAI,KAAQ5F,EAAOiK,EAAQrE,EAAI,IACxHuE,EAAUnK,KACXmK,EAAUnK,GAAQ,GAClBmK,EAAUnK,GAAMoK,YAAc,EAC9BD,EAAUnK,GAAMqK,OAAS,IACzBF,EAAUnK,GAAMsK,OAAS,EACzBH,EAAUnK,GAAMQ,OAAS,IAE7B2J,EAAUnK,GAAMoK,aAAeG,EAC/BJ,EAAUnK,GAAMgE,OAASmG,EAAUnK,GAAMgE,OAASmG,EAAUnK,GAAMgE,OAAS,EAAI,EAC/EmG,EAAUnK,GAAMqK,OAASF,EAAUnK,GAAMqK,OAASE,EAAUA,EAAUJ,EAAUnK,GAAMqK,OACtFF,EAAUnK,GAAMsK,OAASH,EAAUnK,GAAMsK,OAASC,EAAUA,EAAUJ,EAAUnK,GAAMsK,OACtFH,EAAUnK,GAAMQ,OAAOH,KAAKkK,SA5B5BJ,EAAUnK,GAAQ,GAClBmK,EAAUnK,GAAMoK,YAAcJ,EAAUpE,GACxCuE,EAAUnK,GAAMgE,OAAS,EACzBmG,EAAUnK,GAAMqK,OAASL,EAAUpE,GACnCuE,EAAUnK,GAAMsK,OAASN,EAAUpE,GACnCuE,EAAUnK,GAAMQ,OAAS,GACzB2J,EAAUnK,GAAMQ,OAAOH,KAAK2J,EAAUpE,IACtCA,OAqRJ4E,CANU,EACQxB,EAAWrE,EAAI/D,WAAW,GAAGG,eAAiB4D,EAAI/D,WAAW,GAAGE,QAClE6D,EAAI/D,WAAW,GAAGC,MACC,YAAjB8D,EAAIhE,SAAyBmJ,EAAmBC,EAC3B,YAAjBpF,EAAIhE,SAAyBwI,EAAU,GAAKA,EAAU,OAKhF,IA/B+E,eA+BtEsB,GACL,IAAMC,EAAMf,EAASc,GAEfN,EAA4B,YAAhBR,EAASc,GAAmBX,EAAmBC,EAlCU,EA9N3D,SAACI,EAAWlB,EAAY0B,EAASpM,GAErD,IAAI6K,EAAU,EACVC,EAAY,EAChB9K,EAAKuB,SAAQ,SAAC6E,GACW,YAAjBA,EAAIhE,SACJyI,GAAW,EAEXC,GAAa,KAGrB,IAAMuB,EAAyB,YAAZD,EAAwBvB,EAAUC,EAI/CwB,EAAa,GACbC,EAAiB,GACjBjK,EAAQ,GAgBd,OAdA2D,OAAOC,KAAK0F,GAAWrK,SAAQ,SAACwF,GAE5B,GAD4B6E,EAAU7E,GAAS9E,OAAOqC,OAAS,GAC7BoG,GAA6B,IAAf2B,EAAmB,CAE/DC,EAAWxK,KAAK+H,KAAQ+B,EAAU7E,GAAS9E,SAE3C,IAAMuK,EAAY3C,KAAa+B,EAAU7E,GAAS9E,QAC5C1C,EAAQkN,KAAKC,KAAKd,EAAU7E,GAAS9E,OAAOqC,OAAS,GAC3DiI,EAAezK,KAAK0K,EAAYjN,GAEhC+C,EAAMR,KAAKiF,OAIZ,CACHuF,EACAC,EACAjK,EACA+J,GA8NoDM,CAAgBf,EAAWlB,EAAYU,EAASc,GAAIlM,GArC7B,mBAqCpEsM,EArCoE,KAqCxDC,EArCwD,KAqCxCjK,EArCwC,KAqCjCmD,EArCiC,KAwC3E,GAAIkF,EAAY,CAEZ,IAAMiC,EAAUtC,EAAIhK,OAAO,KACtB6J,KAAK,KADM,eACQiB,EAASc,KAEhBU,EAAQ3C,UAAU,aAC9BjK,KAAKsM,GACLpC,QAEI5J,OAAO,UACX6J,KAAK,KADV,mBAC4BiB,EAASc,GADrC,YAC2CnK,IACtCoI,KAAK,QAFV,mBAE+BpI,IAC1BoI,KAAK,IAAK,GACVA,KAAK,QAAQ,WACV,MAAoB,YAAhBiB,EAASc,GACH,GAAN,OAAUnO,GAER,GAAN,OAAUA,MAEboM,KAAK,MAAM,SAACT,EAAG9K,GAAJ,OAAU2L,EAAOjI,EAAM1D,OAClCuL,KAAK,MAAM,SAACT,EAAG9K,GAAJ,OAAU4L,EAAO8B,EAAW1N,OAE5C,IAAMiO,EAAWD,EAAQ3C,UAAU,cAC9BjK,KAAKsM,GACLpC,QAEC4C,EAAWjD,OACZkD,GAAE,SAACrD,EAAG9K,GAAJ,OAAU2L,EAAOK,EAAUsB,GAAGtN,OAChCoO,GAAE,SAACtD,EAAG9K,GAAJ,OAAU4L,EAAO8B,EAAW1N,OAEnCiO,EAASvM,OAAO,QACX6J,KAAK,KADV,oBAC6BiB,EAASc,GADtC,YAC4CnK,IACvCoI,KAAK,QAFV,oBAEgCpI,IAC3BoI,KAAK,IAAK2C,EAASR,IACnBnC,KAAK,OAAQ,QACb5G,MAAM,UAAW,IACjB4G,KAAK,UAAU,WACZ,MAAoB,YAAhBiB,EAASc,GACH,GAAN,OAAUnO,GAER,GAAN,OAAUA,MAEboM,KAAK,eAAgB,GAI1BO,GAAcjF,EAAS,GA1Qb,SAAC0G,EAAK7J,EAAOsJ,EAAWU,EAAYhC,EAAKC,EAAQC,EAAQ+B,GAC3E,IAAMU,EAAY3C,EAAIhK,OAAO,KACxB6J,KAAK,KAAM,aAEI8C,EAAUhD,UAAU,cACnCjK,KAAKsC,GAEE4H,QACP5J,OAAO,QACP6J,KAAK,QAAS,SACdA,KAAK,UAAU,WACZ,MACU,GAAN,OADQ,YAARgC,EACUpO,EAEJA,MAEboM,KAAK,eAAgB,GACrBA,KAAK,MAAM,SAACT,GAAD,OAAOa,EAAOb,MACzBS,KAAK,MAAM,SAACT,GAAD,OAAOa,EAAOb,MACzBS,KAAK,MAAM,SAACT,EAAG9K,GAAJ,OAAU4L,EAAO8B,EAAW1N,GAAK2N,EAAe3N,OAC3DuL,KAAK,MAAM,SAACT,EAAG9K,GAAJ,OAAU4L,EAAO8B,EAAW1N,GAAK2N,EAAe3N,OAE5CqO,EAAUhD,UAAU,iBACnCjK,KAAKsC,GAEE4H,QACP5J,OAAO,QACP6J,KAAK,QAAS,YACdA,KAAK,UAAU,WACZ,MACU,GAAN,OADQ,YAARgC,EACUpO,EAEJA,MAEboM,KAAK,eAAgB,GACrBA,KAAK,MAAM,SAACT,GAAD,OAAOa,EAAOb,GAAK,KAC9BS,KAAK,MAAM,SAACT,GAAD,OAAOa,EAAOb,GAAK,KAC9BS,KAAK,MAAM,SAACT,EAAG9K,GAAJ,OAAU4L,EAAO8B,EAAW1N,GAAK2N,EAAe3N,OAC3DuL,KAAK,MAAM,SAACT,EAAG9K,GAAJ,OAAU4L,EAAO8B,EAAW1N,GAAK2N,EAAe3N,OAE5CqO,EAAUhD,UAAU,iBACnCjK,KAAKsC,GAEE4H,QACP5J,OAAO,QACP6J,KAAK,QAAS,YACdA,KAAK,UAAU,WACZ,MACU,GAAN,OADQ,YAARgC,EACUpO,EAEJA,MAEboM,KAAK,eAAgB,GACrBA,KAAK,MAAM,SAACT,GAAD,OAAOa,EAAOb,GAAK,KAC9BS,KAAK,MAAM,SAACT,GAAD,OAAOa,EAAOb,GAAK,KAC9BS,KAAK,MAAM,SAACT,EAAG9K,GAAJ,OAAU4L,EAAO8B,EAAW1N,GAAK2N,EAAe3N,OAC3DuL,KAAK,MAAM,SAACT,EAAG9K,GAAJ,OAAU4L,EAAO8B,EAAW1N,GAAK2N,EAAe3N,OAmNxDsO,CAAcf,EAAK7J,EAAOsJ,EAAWU,EAAYhC,EAAKC,EAAQC,EAAQ+B,IAxDrEL,EAAI,EAAGA,EAAId,EAAS9G,OAAQ4H,IAAM,EAAlCA,IA6DPiB,GAAY,SAACnN,EAAMoN,EAAO7C,EAAQC,EAAQb,EAAS0D,GAErD,IAAMC,EAASF,EAAMnD,UAAU,WAC1BjK,KAAKA,GACLkK,QACA5J,OAAO,KACP6J,KAAK,QAAS,SAEboD,EAAQH,EAAMnD,UAAU,eACzBjK,MAAK,kBAAMA,KACXkK,QAGC4C,EAAWjD,OACZkD,GAAE,SAACrD,GAAD,OAAOa,EAAOb,EAAEjI,SAClBuL,GAAE,SAACtD,GACA,OACWc,EADP6C,EACc3D,EAAExH,cAENwH,EAAEzH,WAIlBuL,EAAa,SAACC,EAAQC,GAAT,IAAkB3I,EAAlB,iEAA6BhH,GAA7B,OACfwP,EAAMjN,OAAO,QACR6J,KAAK,MAAM,SAACT,GAAD,qBAAeA,EAAEvH,MAAMyE,QAAQ,MAAO,KAAKA,QAAQ,MAAO,SACrEuD,KAAK,SAAS,SAACT,GAAD,2BAAqBA,EAAEtH,aACrC+H,KAAK,KAAK,SAACT,GAAD,OAAOoD,EAASpD,EAAE7H,aAC5BsI,KAAK,OAAQ,QACb5G,MAAM,UAAWmK,GACjBvD,KAAK,UAAU,SAACT,GACb,MAAc,UAAV3E,EACOA,EAEQ,YAAf2E,EAAEtH,SACI,GAAN,OAAUrE,GAER,GAAN,OAAUA,MAEboM,KAAK,eAAgBsD,IAIxBE,EAAc,SAACjE,EAAG+D,EAAQC,EAASE,EAAQC,EAAOC,EAAQC,GAC5DlE,KAAA,gBAAmBH,EAAEvH,MAAMyE,QAAQ,MAAO,KAAKA,QAAQ,MAAO,OACzDuD,KAAK,eAAgBsD,GACrBlK,MAAM,UAAWmK,GACtB7D,KAAA,yBAA+BH,EAAEvH,MAAMyE,QAAQ,MAAO,OACjDqD,UAAU,MACV1G,MAAM,QAASqK,GACfrK,MAAM,aAAcsK,GACzBhE,KAAA,yBAA+BH,EAAEvH,MAAMyE,QAAQ,MAAO,OACjDqD,UAAU,KACV1G,MAAM,QAASuK,GACfvK,MAAM,aAAcwK,IAI7BP,EAAW,EAAG,IACTrD,KAAK,mBAA0B,KAGpCqD,EAAW,EAAG,EAAG,SACZQ,GAAG,aAAa,SAACtE,GAEdD,GAAcC,EAAG,OAAQC,GAEzBgE,EAAYjE,EAAG,EAAG,EAAK,UAAZ,UAA0B3L,GAAe,UAAzC,UAAuDA,OAErEiQ,GAAG,YAAY,SAACtE,GAEbG,KAAa,gBAAgBoE,SAE7BtE,EACKpG,MAAM,aAAc,UAEnBsG,KAAA,gBAAmBH,EAAEvH,MAAMyE,QAAQ,MAAO,KAAKA,QAAQ,MAAO,OAAQsH,QAAQ,aAChFP,EAAYjE,EAAG,EAAG,GAAP,UAAe3L,GAAkB,QAAjC,UAA6CA,GAAe,YAG9EiQ,GAAG,SAAS,SAACtE,GACVG,KAAS1J,iBACT,IAAIgO,GAAgB,EACdC,EAAYvE,KAAA,gBAAmBH,EAAEvH,MAAMyE,QAAQ,MAAO,KAAKA,QAAQ,MAAO,OAG1EiD,KAASwE,SAAWxE,KAASyE,SAC/BzE,KAAa,QAAQ0E,QAAQhN,SAAQ,SAAC6E,GAClC,GAAIA,EAAIoI,WAAW,IAA4B,MAAtBpI,EAAI7C,MAAMmK,SAAmBtH,EAAIqI,UAAUC,SAAS,YAAa,CACtFtI,EAAIoI,WAAW,GAAG7P,MAAQ,EAC1ByH,EAAI7C,MAAMmK,QAAU,GACpB,IAAMiB,EAAoB9E,KAAA,WAAczD,EAAIqI,UAAU,KAChDtM,EAAQwM,EAAkB3O,OAAO,GACvC2O,EAAkBT,QAAQ,YAAY,GACtCP,EAAYxL,EAAO,EAAG,GAAX,UAAmBpE,GAAkB,QAArC,UAAiDA,GAAe,SACvEqI,EAAIqI,UAAU,KAAOL,EAAUjE,KAAK,WACpCgE,GAAgB,OAO1BC,EAAUF,QAAQ,aAAiBC,EAG9BC,EAAUF,QAAQ,cACzBE,EAAUF,QAAQ,YAAY,GAC9BP,EAAYjE,EAAG,EAAG,GAAP,UAAe3L,GAAkB,QAAjC,UAA6CA,GAAe,WAJvEqQ,EAAUF,QAAQ,YAAY,GAC9BP,EAAYjE,EAAG,EAAG,EAAK,UAAZ,UAA0B3L,GAAe,UAAzC,UAAuDA,QAQjEuP,EAAOrD,UAAU,cACzBjK,MAAK,SAAC0J,GAAD,OAAOA,EAAE7H,YACdqI,QAGA5J,OAAO,UACP6J,KAAK,MAAM,SAACT,EAAG9K,GAAJ,oBAAiB8K,EAAEvH,MAAMyE,QAAQ,MAAO,KAAKA,QAAQ,MAAO,KAA5D,YACR8C,EAAEtH,UADM,OACKxD,MAChBuL,KAAK,SAAS,SAACT,GAAD,0BAAoBA,EAAEtH,aACpC+H,KAAK,IAAK,GACVA,KAAK,QAAQ,SAACT,GACX,MAAmB,YAAfA,EAAEtH,SACI,GAAN,OAAUrE,GAER,GAAN,OAAUA,MAEbwF,MAAM,UAAW,GACjB4G,KAAK,MAAM,SAACT,GAAD,OAAOa,EAAOb,EAAEjI,SAC3B0I,KAAK,MAAM,SAACT,GACT,OACWc,EADP6C,EACc3D,EAAExH,cAENwH,EAAEzH,WAEnB+L,GAAG,aAAa,SAACtE,GAEdD,GAAcC,EAAG,MAAOC,MAE3BqE,GAAG,YAAY,WAEZnE,KAAa,gBAAgBoE,SAE7BtE,EACKpG,MAAM,aAAc,aAIjC8G,GAAUrK,EAAMoN,EAAO7C,EAAQC,EAAQ6C,GAAM,GAAO,IAIlDuB,GAAe,SAAC5O,EAAMsK,EAAKC,EAAQsE,EAAOC,EAAQC,EAAWC,EAAYC,EAAYtF,GACvF,IACIuF,GAAe,EACfxE,GAAa,EA8DjB,SAASyE,EAAyBD,EAAcD,EAAYD,EAAYD,GAAW,MAxBnF,SAAoBG,EAAcD,EAAYD,EAAYD,GACtD,IAAIK,EAAU,EACVC,EAAU,EAUd,OARIH,GACAE,EAAUH,EAAa,EACvBI,EAAUL,EAAa,IAEvBI,EAAU,EACVC,EAAUN,GAGP,CAACK,EAASC,GAcUC,CAAWJ,EAAcD,EAAYD,EAAYD,GAFG,mBAExEK,EAFwE,KAE/DC,EAF+D,KAS/E,OALexF,OACV0F,OAAO,CAACH,EAASC,IACjBG,MAAM,CAACV,EAAQ,IACfW,OAvEY,CAAC,YAAa,gBAAiB,WAAY,eAAgB,SAAU,UAAW,aAAc,eA4EtGlO,SAAQ,SAAC6E,GAElB,IAAIsJ,EAAmB,GACnB3K,EAAK,UAAMhH,GACX4R,EAAK,GACLC,EAAS,UAAM7R,GACf8R,EAAa,YACbC,EAAS,UAAM/R,GACfgS,EAAc,YAGdC,EAAO,GACPC,EAAa,GACbC,EAAc,GAIlB,OAAQ9J,GACR,IAAK,WACL,IAAK,eACDsJ,EAAmB,GACnB3K,EAAQ,YACR4K,EAAa,aAARvJ,EAAqB,WAAa,eACvC4J,EAAe,iBAAR5J,EAAyB,YAAc,GAC9C6J,EAAa,GACbH,EAAY,YACZC,EAAW,UAAMhS,GACjB,MAEJ,IAAK,YACD4R,EAAK,YACL,MAEJ,IAAK,gBACDA,EAAK,gBACLK,EAAO,aACPC,EAAa,GACbC,EAAc,GACd,MAEJ,IAAK,SACDR,EAAmB,IACnBC,EAAK,eACL5K,EAAK,UAAMhH,GACX,MAEJ,IAAK,aACD4R,EAAK,aACLK,EAAO,MACPC,EAAa,GACbC,EAAc,IACd,MAEJ,IAAK,UACDR,EAAmB,IACnBC,EAAK,gBACL5K,EAAQ,YACEkK,EAAa,EACbD,EAAa,EACvBY,EAAY,YACZC,EAAU,UAAM9R,GAChB,MAEJ,IAAK,cACD4R,EAAK,cACLK,EAAO,aACPC,EAAa,GACbC,EAAc,IACJjB,EAAa,EACbD,EAAa,EACvBY,EAAY,YACZC,EAAU,UAAM9R,GAChB,MAEJ,QACI4R,EAAK,sBAlJb,SAA0BD,EAAkB3K,EAAO4K,EAAIvJ,EAAK4J,EAAMC,EAAYC,GAC1E,IAAIC,EAAO,GACX,OAAQ/J,GACR,IAAK,SACL,IAAK,UACL,IAAK,WACL,IAAK,YACD+J,EAAO7F,EAAIhK,OAAO,QACb6J,KAAK,IAAK0E,EAAQ,IAClB1E,KAAK,IAAK2E,EAAS,EAAIY,GACvBvF,KAAK,QAAS,IACdA,KAAK,SAAU,IACfA,KAAK,OAAQpF,GACbxB,MAAM,UAAW,IACjB4G,KAAK,KAAMwF,GAChB,MACJ,IAAK,aACL,IAAK,cACL,IAAK,eACL,IAAK,gBACDQ,EAAO7F,EAAIhK,OAAO,QACb6J,KAAK,OAAQ,SACb5G,MAAM,YAAa,QACnB4G,KAAK,cAAuB,eAAR/D,EAAuB,SAAW,QACtD+D,KAAK,KAAMwF,GACXxF,KAAK,IAAK0E,EAAQoB,GAClB9F,KAAK,IAAK2E,EAAS,EAAIoB,GACvBF,KAAKA,GACV,MACJ,QACI7M,QAAQC,IAAI,sBAEhB,OAAO+M,GAsHAC,CAAiBV,EAAkB3K,EAAO4K,EAAIvJ,EAAK4J,EAAMC,EAAYC,GAGvElC,GAAG,SAAS,WACb7K,QAAQC,IAAIgD,GAERA,EAAI3D,MAAM,yBACVoH,KAAU,gBACLmG,KAAK,8BACH5J,EAAI3D,MAAM,wBACjBoH,KAAU,gBACLmG,KAAK,mBAGd,IAAIxF,EAAS2E,EAAyBD,EAAcD,EAAYD,EAAYD,GAE5E,GAAI3I,EAAI3D,MAAM,oDAGNiI,IADAtE,EAAI3D,MAAM,4BAMdoH,KAAa,MAAM0E,QAAQhN,SAAQ,SAAC6E,GAC5BA,EAAIrD,YACJ8G,KAAA,WAAczD,EAAIrD,YACbkH,UAAU,MACV1G,MAAM,QAFX,UAEuBxF,IAClBwF,MAAM,aAAc,SACzBsG,KAAA,WAAczD,EAAIrD,YACbkH,UAAU,KACV1G,MAAM,QAFX,UAEuBxF,IAClBwF,MAAM,aAAc,aAIjCsG,KAAU,aAAaM,KAAK,OAAQ4F,GACpClG,KAAU,cAAcM,KAAK,OAAQ2F,OAClC,CAIHtF,EAAS2E,EAFTD,EA7IZ,SAA2B9I,GACvB,IAAI8I,GAAe,EAKnB,OAHI9I,EAAI3D,MAAM,4BACVyM,GAAe,GAEZA,EAuIgBmB,CAAkBjK,GAEe6I,EAAYD,EAAYD,GAExE,IAAMuB,EAAQzG,OACT0G,MAAM/F,GACNgG,YAAY,GAEjB3G,KAAa,YAAY4G,KAAKH,GAE9BhG,EAAIL,UAAU,SAASyG,OAAO,QACzBvG,KAAK,OAAQ,SACbA,KAAK,SAAU,QACfA,KAAK,YAAa,QAEvBN,KAAU,iBAAiBM,KAAK,OAAQyF,GACxC/F,KAAU,kBAAkBM,KAAK,OAAQ0F,GAG7ChG,KAAU,WAAWoE,SAErB,IAAMb,EAAQ9C,EAAIhK,OAAO,KACpB6J,KAAK,KAAM,UAEZO,EACAL,GAAUrK,EAAMoN,EAAO7C,EAAQC,EAAQ0E,GAAc,GAAM,GAE3D/B,GAAUnN,EAAMoN,EAAO7C,EAAQC,EAAQb,EAASuF,UA0CjDyB,GAnCU,SAAC1L,GAAW,IACzBjF,EAASiF,EAATjF,KAEFuJ,EAAerK,mBAoBrB,OAjBA2K,KAAU,YAAYoE,SAGtBtO,qBAAU,WACN,GAAoB,IAAhBK,EAAKsE,OAAc,CACnB,IAAMqF,EA11BcE,KAAU,YACrCvJ,OAAO,OACPiD,MAAM,WAAY,YAClBA,MAAM,aAAc,UACpBA,MAAM,SAAU,SAChBA,MAAM,eAAgB,OACtBA,MAAM,gBAAiB,OACvBA,MAAM,UAAW,OACjBA,MAAM,YAAa,SACnBA,MAAM,aAAc,SACpB4G,KAAK,MAAO,IACZA,KAAK,OAAQ,IAi1BAyG,EAvyBM,SAAC5Q,GAUrB,IARA,IAAM6Q,EAAe,GACfC,EAAe,GACfC,EAAc,GACdC,EAAc,GACdC,EAAkB,GAClBC,EAAkB,GAGftS,EAAI,EAAGA,EAAIoB,EAAKsE,OAAQ1F,IAC7BiS,EAAa/O,KAAK+H,KAAO7J,EAAKpB,GAAGyD,WAAW,GAAGC,QAC/CwO,EAAahP,KAAK+H,KAAO7J,EAAKpB,GAAGyD,WAAW,GAAGC,QAC/CyO,EAAYjP,KAAK+H,KAAO7J,EAAKpB,GAAGyD,WAAW,GAAGE,UAC9CyO,EAAYlP,KAAK+H,KAAO7J,EAAKpB,GAAGyD,WAAW,GAAGE,UAC9C0O,EAAgBnP,KAAK+H,KAAO7J,EAAKpB,GAAGyD,WAAW,GAAGG,iBAClD0O,EAAgBpP,KAAK+H,KAAO7J,EAAKpB,GAAGyD,WAAW,GAAGG,iBAWtD,MAAO,CACH2O,QARY1E,KAAKtE,IAAIiJ,MAAM,KAAMN,GAQxBO,QAPG5E,KAAKtE,IAAIiJ,MAAM,KAAMP,GAOfS,UANJ7E,KAAK8E,IAAIH,MAAM,KAAML,GAMNhC,UALftC,KAAKtE,IAAIiJ,MAAM,KAAMJ,GAKKhC,WAJzBvC,KAAKtE,IAAIiJ,MAAM,KAAMH,GAIgBhC,WAHrCxC,KAAK8E,IAAIH,MAAM,KAAMF,IA8wBjBM,CAAgBxR,GAEzByR,EApmBC,SAACzR,EAAM0R,EAAQd,GAE9B,IAAMxF,EAAW,CAAC,UAAW,aAGvBuG,EACG,GADHA,EAEK,IAFLA,EAGM,GAHNA,EAII,GAMJrH,EAAMT,KAAU,cACjBvJ,OAAO,OACP6J,KAAK,KAFE,aAEUuH,IACjBvH,KAAK,QAAS,8BACdA,KAAK,cAAe,gCACpBA,KAAK,QATI,IASawH,EAAcA,GACpCxH,KAAK,SATK,IAScwH,EAAaA,GACrCrR,OAAO,KACP6J,KAAK,YARE,oBAQwBwH,EARxB,YAQuCA,EARvC,MAWNC,EAAStH,EAAIL,UAAU,WACxBjK,KAAKoL,GACLlB,QAEL0H,EAAOtR,OAAO,UACT6J,KAAK,MAAM,SAACT,EAAG9K,GAAJ,2BAAwBwM,EAASxM,OAC5CuL,KAAK,QAAS,UACdA,KAAK,IAAK,GACVA,KAAK,QAAQ,SAACT,EAAG9K,GACd,MACU,GAAN,OADgB,YAAhBwM,EAASxM,GACCb,EAEJA,MAEboM,KAAK,KAAM0E,KACX1E,KAAK,MAAM,SAACT,EAAG9K,GAAJ,OAAUkQ,IAAuB,GAAJlQ,KAE7CgT,EAAOtR,OAAO,QACT6J,KAAK,MAAM,SAACT,EAAG9K,GAAJ,4BAAyBwM,EAASxM,OAC7CuL,KAAK,QAAS,UACdA,KAAK,OAAQ,SACb5G,MAAM,YAAa,QACnB4G,KAAK,IAAK0E,KACV1E,KAAK,KAAK,SAACT,EAAG9K,GAAJ,OAAUkQ,IAAuB,GAAJlQ,KACvCoR,MAAK,SAACtG,EAAG9K,GAAJ,OAAUwM,EAASxM,MAG7B,IAAM2L,EAASV,OACV0F,OAAO,CAACqB,EAAOO,QAASP,EAAOS,UAC/B7B,MAAM,CAAC,EA5CE,MA8CRhF,EAASX,OACV0F,OAAO,CAAC,EAAGqB,EAAO7B,YAClBS,MAAM,CA/CI,IA+CK,IACfC,OAGCoC,EAAQhI,OACT0G,MAAMhG,GACNiG,YAAY,GAEXF,EAAQzG,OACT0G,MAAM/F,GACNgG,YAAY,GAGjBlG,EAAIhK,OAAO,KACN6J,KAAK,QAAS,UACdA,KAAK,YAFV,sBAEsCK,EAAO,GAF7C,MAGKL,KAAK,OAAQ,QACbA,KAAK,SAAU,SACfA,KAAK,eAAgB,GACrBsG,KAAKoB,GAGVvH,EAAIhK,OAAO,QACN6J,KAAK,cAAe,UACpBA,KAAK,OAAQ,SACbA,KAAK,YAHV,oBAGoC0E,IAHpC,YAGiDC,IAHjD,MAIK3E,KAAK,YAAa,QAClB6F,KAAK,eAGO1F,EAAIhK,OAAO,KACvB6J,KAAK,QAAS,UACdA,KAAK,OAAQ,QACbA,KAAK,SAAU,SACfA,KAAK,eAAgB,GACrBsG,KAAKH,GAoBV,OAjBAhG,EAAIhK,OAAO,QACN6J,KAAK,cAAe,UACpBA,KAAK,OAAQ,SACbA,KAAK,KAAM,eACXA,KAAK,YAJV,qBAIqC,GAJrC,YAI2C2E,IAJ3C,iBAKK3E,KAAK,YAAa,QAClB6F,KAAK,mBAGV1F,EAAIL,UAAU,SAASyG,OAAO,QACzBvG,KAAK,OAAQ,SACbA,KAAK,SAAU,QACfA,KAAK,YAAa,QAKhB,CACHiD,MAJU9C,EAAIhK,OAAO,KACpB6J,KAAK,KAAM,UAGLI,SAAQC,SAAQqE,MAxGb,IAwGoBC,OAvGnB,IAuG2BxE,OAifpBwH,CAAW9R,EAblB,OAagC4Q,GAEvCzD,GAAUnN,EAAMyR,EAAMrE,MAAOqE,EAAMlH,OAAQkH,EAAMjH,OAAQb,GAAS,GAElEiF,GAAa5O,EAAMyR,EAAMnH,IAAKmH,EAAMlH,OAAQkH,EAAM5C,MAAO4C,EAAM3C,OAAQ8B,EAAO7B,UAAW6B,EAAO5B,WAAY4B,EAAO3B,WAAYtF,OAKnI,6BACI,kBAAC,GAAD,CAAgBJ,aAAcA,IAC9B,yBAAKoG,GAAG,YAAY3M,IAAKuG,EAAchG,MAAO,CAACwO,MAAM,uB,48BC32BjE,IAAMC,GAAiB3T,UAAOC,IAAV,KAMPP,EA0BaA,EAKAA,GA6BXkU,GApBE,WAAO,IACZ5S,EAAkBF,qBAAWC,GAA7BC,cACAW,EAAkBX,EAAlBW,KAAMR,EAAYH,EAAZG,QAEd,OACI,kBAACwS,GAAD,KACI,wBAAIjP,UAAU,mBAAd,oBACA,yBAAKA,UAAU,aACX,kBAAC,GAAD,CAAiB/C,KAAMR,KAE3B,yBAAKuD,UAAU,aACX,kBAAC,GAAD,CAAkB/C,KAAMA,EAAMkS,aAAa,UAAUC,UAAU,YAEnE,yBAAKpP,UAAU,aACX,kBAAC,GAAD,CAAiB/C,KAAMR,O,+TClEvC,IAAM4S,GAAkB/T,UAAOC,IAAV,KAUJP,GAWFsU,GAPU,kBACrB,kBAACD,GAAD,KACI,2EACA,kBAAC,KAAD,CAAc1O,KAAK,SAASmL,MAAO,IAAKC,OAAQ,IAAK/J,MAAOhH,M,oBCoBrDuU,OAlCf,WAAiB,IAAD,EAC8BxT,mBAAS,CAC/CkB,KAAM,KAAMR,QAAS,KAAMY,SAAS,EAAOb,MAAO,OAF1C,mBACLF,EADK,KACUC,EADV,KAKRc,EACAf,EADAe,QAASZ,EACTH,EADSG,QAEb,OACI,yBAAKuD,UAAU,OACX,kBAAC,IAAD,CAAMwP,GAAG,OAAOxP,UAAU,wBACtB,4BAAQW,KAAK,UAAb,oBAEJ,kBAACtE,EAAgBoT,SAAjB,CAA0B7T,MAAO,CAAEU,gBAAeC,qBAC9C,8BACI,6BACI,uBAAGmT,KAAK,wBAAwBC,OAAO,SAASC,IAAI,cAChD,yBAAKvN,IAAI,OAAOrC,UAAU,OAAOmC,IAAK0N,SAG9C,yFACA,kBAACC,EAAD,MAEKzS,EAIG,kBAAC0S,GAAD,MAHA,oCACKtT,EAAU,kBAAC,GAAD,MAAe,mC,o7ECtB1D,IAAMuT,GAAsB1U,UAAOC,IAAV,KAKdN,IAiBED,EASAA,EAeAA,EAKAA,EAQAA,GAKPiV,GAAoB,CACtBC,OAAO,8RAEPC,IAAK,6GACLC,MAAO,oHACPtM,QAAS,qHACTR,IAAK,gDAiEM+M,GA9DO,kBAClB,kBAACL,GAAD,KACI,kBAAC,IAAD,CAAMR,GAAG,IAAIxP,UAAU,eACnB,4BAAQW,KAAK,UAAb,WAEJ,+CACA,6BACI,0CACA,0pBAOI,6BACA,6BARJ,mIAWA,mDACA,gRAIK,IACD,sCALJ,oCAOK,IACD,wCACC,IATL,MAWK,IACD,0CACC,IAbL,6KAiBA,yBAAKwB,IAAKmO,KAAOtQ,UAAU,SAASqC,IAAI,UACxC,6CACA,2EACA,4BAEQa,OAAOC,KAAK8M,IAAmBrM,KAAI,SAACiB,GAAD,OAC/B,4BACI,8BACK,IACAA,EAFL,IAIK,KAEJoL,GAAkBpL,QAKnC,yBAAK1C,IAAKoO,KAAOvQ,UAAU,SAASqC,IAAI,UACxC,yBAAKF,IAAK/C,KAAOY,UAAU,SAASqC,IAAI,mBACxC,yBAAKF,IAAKkI,KAAOrK,UAAU,SAASqC,IAAI,oBC/GrCmO,GApBH,WAQR,OANA5T,qBAAU,WACN6T,IAAQC,WAAW,kBAEnBD,IAAQE,SAASC,OAAOC,SAASC,SAAWF,OAAOC,SAASE,UAC7D,IAGC,6BACI,kBAAC,IAAD,KACI,kBAAC,YAAD,MACA,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAW3B,KACjC,kBAAC,IAAD,CAAOyB,KAAK,OAAOC,OAAK,EAACC,UAAWb,QCnBpDc,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,GAAD,OAEJC,SAASC,eAAe,U,mBCR5BC,EAAOC,QAAU,IAA0B,uC,mBCA3CD,EAAOC,QAAU,IAA0B,gC,8pJCA3CD,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,oC","file":"static/js/main.7bc07d80.chunk.js","sourcesContent":["export default {\n    main: '#0c61a1',\n    gray_bg: '#dcdee0',\n    darkblue_bg: '#0c61a1',\n    darkblue_text: '#052f63',\n    red_main: '#b50d34',\n    tussock: '#d5840b',\n    pale_blue: '#edf2f5',\n    main_light: '#83b7de'\n};\n","import { createGlobalStyle } from 'styled-components';\nimport colors from './colors';\nimport bgImg from '../images/bg.png';\n\nconst GlobalStyles = createGlobalStyle`\n    * {\n        font-family: 'Sen', sans-serif;\n    }\n    \n    h1, h2, h3 {\n        margin: 0;\n        color: ${colors.main};\n        font-weight: 500;\n        text-align: center;\n    }\n  \n    h1 {\n        text-align: left !important;\n        font-size: calc(5vw + 5em);\n        letter-spacing: 3px;\n    }\n    h2 {\n        font-size: calc(1vw + 1.5em);\n    }\n    h3 {\n        margin-top: 15px !important;\n        font-size: calc(0.5vw + 1.5em);\n        font-weight: 700 !important;\n    }\n\n    .documentation-button, .home-button {\n        align-self: flex-end !important;\n        button {\n            margin-top: 30px;\n            margin-left: 30px;\n            margin-right: 30px;\n            background: ${colors.main};\n            color: white;\n            border: none;\n            cursor: pointer;\n            padding: 10px;\n            border-radius: 6px;\n            font-weight: 600;\n            outline: none;\n            transition: all ease-out 0.25s;\n            min-height: 40px;\n            font-size: calc(0.15vw + 1.0em);\n            &:hover {\n                color: ${colors.main};\n                background: white;\n            };\n            &.disabled {\n                cursor: default;\n                background: #778899;\n                color: white;\n            }\n        }\n    }\n\n    .home-button {\n        float: right;\n    }\n\n    main {\n        width: 55%;\n        margin-top: 6vh;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        min-height: 50%;\n        // background:rgb(0,0,0,0.5);\n    }\n\n    @media only screen and (max-width: 1200px) {\n        main {\n            width: 65%\n        }\n    }\n\n    @media only screen and (max-width: 1160px) {\n        main {\n            width: 67%\n        }\n    }\n\n    @media only screen and (max-width: 1130px) {\n        main {\n            width: 69%\n        }\n    }\n\n    @media only screen and (max-width: 1100px) {\n        main {\n            width: 75%\n        }\n    }\n    \n    .logo, .images {\n        width: 80% !important;\n        padding-top: 20px;\n        display: block;\n        margin-left: auto;\n        margin-right: auto;\n    }\n\n    .images {\n        width: 55% !important;\n        padding-bottom: 20px;\n    }\n\n    .App {\n        width: 100vw;\n        min-height: 100vh;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        background: linear-gradient(\n            to right,\n            rgba(0, 0, 0, 0), \n            rgba(0, 0, 0, 0)\n        ),url('${bgImg}');\n        background-size: cover;\n        background-attachment: fixed;\n        background-position: center;\n        z-index: 0\n        .main-wrapper {\n            overflow-x: hidden;\n        }\n    }\n}\n`;\n\nexport default GlobalStyles;\n","import React from 'react';\n\nconst analysisContext = React.createContext();\n\nexport default analysisContext;\n","/* eslint-disable no-shadow */\nimport React, {\n    useState, useRef, useContext, useEffect,\n} from 'react';\nimport { CSVReader, readRemoteFile } from 'react-papaparse';\nimport { CSVLink } from 'react-csv';\nimport axios from 'axios';\nimport styled from 'styled-components';\nimport colors from '../../styles/colors';\nimport AnalysisContext from '../Context/AnalysisContext';\nimport exampleSummary1 from '../../data/api-test.json';\nimport exampleSummary2 from '../../data/api-test-2.json';\n\nconst StyledForm = styled.div`\n    background-color: ${colors.gray_bg};\n    border-radius: 25px;\n    width: 75%;\n    min-width: 300px;\n    height: 100%;\n    margin: 50px 0px 100px 0px;\n    padding: 25px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    .error {\n        color: ${colors.red_main};\n        font-weight: 700;\n        font-size: calc(0.45vw + 1.0em);\n    }\n    .main-submit {\n        width: 100%;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        font-size: calc(0.5vw + 0.5em);\n        \n    .input {\n        display:none;\n    }\n    button {\n        background: ${colors.main};\n        color: white;\n        border: none;\n        cursor: pointer;\n        padding: 10px;\n        border-radius: 10px;\n        font-weight: 600;\n        outline: none;\n        transition: all ease-out 0.25s;\n        margin: 0 5px;\n        min-height: 40px;\n        font-size: calc(0.25vw + 1.0em);\n        &:hover {\n            color: ${colors.main};\n            background: white;\n        };\n        &.disabled {\n            cursor: default;\n            background: #778899;\n            color: white;\n        }\n    }\n}\n`;\n\nconst StyledReader = styled.div`\n    background: ${colors.main};\n    color: white;\n    border-radius: 20px;\n    font-weight: 600;\n    font-size: 1.2em;\n    width: 250px;\n    &:hover {\n        background: white;\n        color: ${colors.main};\n    }\n    div {\n        border-width: 0px !important;\n    }\n    div div {\n        span {\n            background-color: transparent !important;\n            color: ${colors.tussock};\n        }\n    }\n    div:nth-child(3) {\n        span {\n            background-color: ${colors.main} !important;\n        }\n    }\n    padding: 1px;\n    margin-right: 20px;\n`;\n\nconst StyleLink = styled.div`\n    a:link {\n        text-decoration: none;\n        color: ${colors.tussock};\n        font-size: .9em;\n        &:hover {\n            color: ${colors.main}\n        }\n    }\n    margin-right: 10px;\n`;\n\n// function to calculate the normal volume.\nconst normalVolume = (vol_array, value, i) => (value - vol_array[i]) / (vol_array[i]);\n\n// onverts parsed csv data from paparse library to proper format\nconst processData = (data, isDrop) => {\n    const output = [];\n    let volume_zero = [];\n    data.forEach((row, i) => {\n        if (!i) {\n            const row_data = isDrop ? row.data : row;\n            row_data.forEach((value, j) => {\n                if (value.match(/(Control|Treatment)/g)) {\n                    output.push({\n                        batch: 'unknown',\n                        drug: value === 'Control' ? 'WATER' : 'unknown',\n                        exp_type: value.toLowerCase(),\n                        model: `unknown${j}`,\n                        pdx_json: [],\n                        pdx_points: [{\n                            times: [],\n                            volumes: [],\n                            volume_normals: [],\n                        }],\n                    });\n                }\n            });\n        } else {\n            let time = 0;\n            let count = 0;\n            const row_data = isDrop ? row.data : row;\n            if (i === 1) {\n                volume_zero = row_data;\n            }\n            row_data.forEach((value, j) => {\n                if (!j) {\n                    time = Number(value);\n                } else if (value !== '') {\n                    output[count].pdx_json.push({\n                        batch: 'unknown',\n                        time: Number(time),\n                        volume: Number(value),\n                        volume_normal: normalVolume(volume_zero, value, j),\n                        model: output[count].model,\n                        exp_type: output[count].exp_type,\n                    });\n                    output[count].pdx_points[0].times.push(Number(time));\n                    output[count].pdx_points[0].volumes.push(Number(value));\n                    output[count].pdx_points[0].volume_normals.push(normalVolume(volume_zero, value, j));\n                    count++;\n                }\n            });\n        }\n    });\n    return output;\n};\n\nconst UploadForm = () => {\n    const [csvFile, setCsvFile] = useState(null);\n    const fileRef = useRef(null);\n    const { analysisState, setAnalysisState } = useContext(AnalysisContext);\n    const { error, summary } = analysisState;\n    const [exampleFile, setExampleFile] = useState([]);\n\n    // to set the example file on the initial render.\n    useEffect(() => {\n        readRemoteFile('example.csv', {\n            download: true,\n            complete: (results) => {\n                setExampleFile(results.data);\n            },\n        });\n    }, []);\n\n    // uploads csv file for analysis\n    const onSubmit = (e) => {\n        e.preventDefault();\n        if (csvFile) {\n            setAnalysisState({\n                ...analysisState, loading: true, summary: null, error: null,\n            });\n            const data = new FormData();\n            data.append('file', csvFile);\n            axios.post('/api/upload', data, {})\n                .then((res) => {\n                    // updates summaru section of the context state, parsed csvData stays the same\n                    setAnalysisState({\n                        ...analysisState, summary: res.data[0], loading: false,\n                    });\n                })\n                .catch((err) => {\n                    // displays error message if request is unsuccessful\n                    if (err.response.status >= 400) {\n                        const { message } = err.response.data;\n                        setAnalysisState({\n                            ...analysisState, loading: false, error: message,\n                        });\n                    } else {\n                        setAnalysisState({\n                            ...analysisState, loading: false, error: 'Something went wrong',\n                        });\n                    }\n                });\n        }\n    };\n\n    const handleOnDrop = (data, file, summary, isDrop) => {\n        // updates csvFile variable if 'file' arg is passed\n        if (file !== undefined) {\n            setCsvFile(file);\n        }\n\n        const modifiedData = processData(data, isDrop);\n\n        setAnalysisState({\n            ...analysisState,\n            summary,\n            data: modifiedData,\n        });\n    };\n\n    const handleOnError = (err) => {\n        console.log(err);\n        setCsvFile(null);\n    };\n\n    const handleOnRemoveFile = () => {\n        setCsvFile(null);\n    };\n\n    // retrieves example data from the backend\n    const getExampleData = (file, example) => {\n        readRemoteFile(file, {\n            download: true,\n            complete: (results) => {\n                // runs handleOnDrop function with parsed csv data and example summary from json\n                // no actual file is being passed this way\n                handleOnDrop(results.data, null, example, false);\n            },\n        });\n    };\n\n    return (\n        <StyledForm>\n            <form className=\"main-submit\" onSubmit={onSubmit}>\n                <StyledReader>\n                    <CSVReader\n                        ref={fileRef}\n                        // actual file drop, summary data is set to null\n                        // (summary will be updated later when API returns data)\n                        onDrop={(data, file) => handleOnDrop(data, file, null, true)}\n                        onError={handleOnError}\n                        addRemoveButton\n                        onRemoveFile={handleOnRemoveFile}\n                        style={{ borderWidth: '0px !important' }}\n                    >\n                        <span> Upload CSV File </span>\n                    </CSVReader>\n                </StyledReader>\n                <StyleLink>\n                    <CSVLink\n                        data={exampleFile}\n                        filename=\"example.csv\"\n                    >\n                        (Download Example File)\n                    </CSVLink>\n                </StyleLink>\n                <button type=\"submit\" onSubmit={onSubmit} disabled={!csvFile} className={!csvFile ? 'disabled' : null}>Analyze</button>\n                <button type=\"button\" onClick={() => getExampleData('example.csv', exampleSummary1)}>Test1</button>\n                <button type=\"button\" onClick={() => getExampleData('example_test_2.csv', exampleSummary2)}>Test2</button>\n            </form>\n            {error ? <p className=\"error\">{error}</p> : null}\n        </StyledForm>\n    );\n};\n\nexport default UploadForm;\n","import styled from 'styled-components';\nimport colors from './colors';\n\nconst TableWrapper = styled.div`\n    padding:10px 20px 30px 20px;\n\n    h3 {\n        color:  ${colors.tussock};\n        text-align: left !important;\n        font-size: calc(0.35vw + 1.0em);\n        margin-top: 0px !important;\n        margin-bottom: 15px !important;\n    }\n\n    .ReactTable *, .ReactTable {\n        box-sizing: border-box;\n        border: 0px solid !important;\n    }\n\n    .ReactTable .rt-table {\n        align-items: stretch;\n        width: 100%;\n        border-collapse: collapse;\n        overflow: auto\n    }\n\n    .ReactTable.-highlight .rt-tbody .rt-tr:not(.-padRow):hover {\n        background: #EAEFF9\n    }\n\n    .ReactTable .rt-th, .ReactTable .rt-td {\n        border-top: 1.0px solid ${colors.pale_blue} !important;\n        border-right: 1.0px solid ${colors.pale_blue} !important;\n        &:first-child {\n            border-left: 1.0px solid ${colors.pale_blue} !important;\n        }\n    }\n\n    .ReactTable .rt-thead {\n        color:  ${colors.main};\n        font-size: calc(0.20vw + 1.0em);\n        font-weight: 600;\n        box-shadow: none !important;\n    }\n\n    .ReactTable .rt-tbody {\n        color:  ${colors.main};\n        font-size: calc(0.10vw + 1.0em);\n        box-shadow: none !important;\n        border-bottom: 1.0px solid ${colors.pale_blue} !important;\n        text-align: center;\n    }\n\n    .-previous, .-next, .-btn {\n      background: ${colors.main};\n      color:white !important;\n    }\n\n    .-pagination, .pagination-bottom {\n        box-shadow: none !important;\n        border: 1px solid ${colors.pale_blue} !important;\n    }\n\n    .ReactTable .-pagination .-pageJump input, input{\n        color: ${colors.main};\n        box-shadow: none !important;\n        background: #EAEFF9 !important;\n    }\n\n    .ReactTable .-pagination select {\n        color: ${colors.main};\n    }\n`;\n\nexport default TableWrapper;\n","import React from 'react';\nimport ReactTable from 'react-table-v6';\nimport { PropTypes } from 'prop-types';\nimport 'react-table-v6/react-table.css';\nimport Collapsible from 'react-collapsible';\nimport styled from 'styled-components';\nimport { CSVLink } from 'react-csv';\nimport TableWrapper from '../../styles/TableStyle';\nimport colors from '../../styles/colors';\nimport downloadIcon from '../../images/download1.svg';\n\nconst StyledCollapsible = styled.div`\n    .Collapsible__trigger {\n        color: ${colors.tussock};\n        font-size: calc(0.35vw + 1em) !important;\n        font-weight: 700;\n        display: block;\n        margin-bottom: 15px;\n        border-radius: 10px;\n        background: white;\n        :hover {\n            color: ${colors.main};\n            cursor: pointer;\n        }\n    }\n`;\n\nconst StyledLink = styled.div`\n    display: inline-block;\n    font-weight: 500;\n    float: right;\n    img {\n        display: inline-block;\n        height: 18px;\n        width: 25px;\n        margin-left: 5px;\n    }\n    a:link {\n        background-color: ${colors.main} !important;\n        color: white !important;\n        padding: 8px !important;\n        border-radius: 6px;\n        text-decoration: none;\n        font-size: 1em;\n    }\n    a:hover {\n        color: ${colors.main} !important;\n        background-color: ${colors.gray_bg} !important;\n    }\n`;\n\nconst reactTable = (data, columns, type, TheadComponent) => (\n    <ReactTable\n        data={data}\n        columns={columns}\n        defaultPageSize={type === 'model' ? 10 : data.length}\n        className=\"-highlight\"\n        filterable={type === 'model'}\n        showPagination={type === 'model'}\n        TheadComponent={TheadComponent}\n        getTrProps={(state, rowInfo) => {\n            if (rowInfo) {\n                return {\n                    style: {\n                        fontWeight:\n                            rowInfo.original.name === 'KuLGaP'\n                                ? '600'\n                                : 'normal',\n                        color:\n                            rowInfo.original.name === 'KuLGaP'\n                                ? `${colors.tussock}`\n                                : `${colors.main}`\n                    }\n                };\n            }\n            return {};\n        }}\n    />\n);\n\nconst renderOutput = (data, columns, type, TheadComponent) => {\n    if (type === 'model') {\n        return (\n            <>\n                <StyledLink>\n                    <CSVLink data={data} filename=\"model.csv\">\n                        Download Statistics\n                        <img src={downloadIcon} alt=\"download icon!\" />\n                    </CSVLink>\n                </StyledLink>\n                <StyledCollapsible>\n                    <Collapsible trigger=\"Statistics (Model Response)\">\n                        {reactTable(data, columns, type, TheadComponent)}\n                    </Collapsible>\n                </StyledCollapsible>\n            </>\n        );\n    }\n    return (\n        <div>\n            <h3 style={{ display: 'inline-block' }}> Statistics </h3>\n            <StyledLink>\n                <CSVLink data={data} filename=\"batch.csv\">\n                    Download Statistics\n                    <img src={downloadIcon} alt=\"download icon!\" />\n                </CSVLink>\n            </StyledLink>\n            {reactTable(data, columns, type, TheadComponent)}\n        </div>\n    );\n};\n\nconst AnalysisTable = props => {\n    const { data, columns, type, TheadComponent } = props;\n    return (\n        <TableWrapper>\n            {renderOutput(data, columns, type, TheadComponent)}\n        </TableWrapper>\n    );\n};\n\n// proptypes.\nAnalysisTable.propTypes = {\n    data: PropTypes.arrayOf(PropTypes.object).isRequired,\n    columns: PropTypes.arrayOf(\n        PropTypes.shape({\n            Header: PropTypes.string,\n            accessor: PropTypes.string,\n            minWidth: PropTypes.number\n        })\n    ).isRequired\n};\n\nexport default AnalysisTable;\n","const FixedPoint = (number) => Number(number).toFixed(2);\n\nexport default FixedPoint;\n","import React from 'react';\nimport AnalysisTable from './AnalysisTable';\nimport FixedPoint from '../utils/FixedPoint';\n\nconst columns = [\n    {\n        Header: 'Drug',\n        accessor: 'drug',\n        minWidth: 100,\n    },\n    {\n        Header: 'mRECIST',\n        accessor: 'mRECIST',\n        minWidth: 120,\n    },\n    {\n        Header: 'Best Average Response',\n        accessor: 'bar',\n        minWidth: 230,\n    },\n    {\n        Header: 'Slope',\n        accessor: 'slope',\n        minWidth: 100,\n    },\n    {\n        Header: 'AUC',\n        accessor: 'AUC',\n        minWidth: 100,\n    },\n];\n\n/**\n *\n * @param {Array} data\n */\nconst parseData = (data) => {\n    const newData = [];\n    const cleanData = (value) => JSON.parse(JSON.stringify(value)).split('_').map((val) => val.replace(/[0-9].*:/, ''));\n    // AUC.\n    Object.keys(data.auc).forEach((val) => {\n        const auc = FixedPoint(data.auc[val]);\n        newData.push({\n            AUC: auc,\n            drug: data.drug,\n            model: 'unknown',\n        });\n    });\n    // AUC CONTROL.\n    cleanData(data.auc_control).forEach((val) => {\n        newData.push({\n            AUC: FixedPoint(val),\n            drug: 'control',\n            model: 'unknown',\n        });\n    });\n    // mRECIST and mRECIST CONTROL.\n    let j = 0;\n    [Object.keys(data.mRECIST), Object.keys(data.mRECIST_control)].forEach((element, i) => {\n        element.forEach((val) => {\n            const values = i ? data.mRECIST_control[val] : data.mRECIST[val];\n            newData[j].mRECIST = values.replace('m', '');\n            j++;\n        });\n    });\n    // BEST AVERAGE RESPONSE and BEST AVERAGE RESPONSE CONTROL.\n    let k = 0;\n    [data.best_avg_response, data.best_avg_response_control].forEach((element) => {\n        element.forEach((val) => {\n            if (newData[k]) {\n                newData[k].bar = FixedPoint(val);\n                k++;\n            }\n        });\n    });\n    // SLOPES.\n    // BEST AVERAGE RESPONSE and BEST AVERAGE RESPONSE CONTROL.\n    let z = 0;\n    [data.lm_slopes_control, data.lm_slopes].forEach((element) => {\n        element.forEach((val) => {\n            if (newData[z]) {\n                newData[z].slope = FixedPoint(val);\n                z++;\n            }\n        });\n    });\n    return newData;\n};\n\nconst ModelStatsTable = ({ data }) => {\n    const tableData = parseData(data);\n    // adds model column if there is at least one known model\n    if (tableData.some((row) => row.model !== 'unknown')) {\n        columns.unshift({\n            Header: 'Model',\n            accessor: 'model',\n            minWidth: 100,\n        });\n    }\n    return (<AnalysisTable data={tableData} columns={columns} type=\"model\" />);\n};\n\nexport default ModelStatsTable;\n","/* eslint-disable no-nested-ternary */\nimport React from 'react';\nimport AnalysisTable from './AnalysisTable';\nimport FixedPoint from '../utils/FixedPoint';\n\nconst columns = [\n    {\n        Header: 'Name',\n        accessor: 'name'\n    },\n    {\n        Header: 'Estimate',\n        accessor: 'estimate'\n    },\n    {\n        Header: 'p-value',\n        accessor: 'p-value'\n    },\n    {\n        Header: 'Responder',\n        accessor: 'responder'\n    }\n];\n\nconst values = [\n    {\n        key: 'kl',\n        value: 'KuLGaP'\n    },\n    {\n        key: 'tgi',\n        value: 'TGI'\n    },\n    {\n        key: 'average_angle',\n        value: 'Angle'\n    },\n    {\n        key: 'mRECIST',\n        value: 'mRECIST'\n    },\n    {\n        key: 'auc',\n        value: 'AUC'\n    }\n];\n\n/**\n *\n * @param {Array} data\n * @returns {String}\n */\nconst calcResponse = data => {\n    const count = {\n        SD: 0,\n        PR: 0,\n        PD: 0,\n        CR: 0\n    };\n    let max = 0;\n    let max_array = [];\n    Object.entries(data.mRECIST).forEach(val => {\n        count[val[1].replace('m', '')] += 1;\n    });\n    Object.entries(count).forEach(val => {\n        if (val[1] > max) {\n            max_array = [];\n            max_array.push(val[0]);\n            max = val[1];\n        } else if (val[1] === max) {\n            max_array.push(val[0]);\n        }\n    });\n    return max_array.join('/');\n};\n\n/**\n *\n * @param {Object} object\n * @param {Array} data\n */\nconst calculateEstimate = (object, data) => {\n    if (object.value === 'mRECIST') {\n        return calcResponse(data);\n    }\n    if (object.value === 'AUC') {\n        return FixedPoint(data.auc_gp - data.auc_gp_control);\n    }\n    return FixedPoint(data[object.key]);\n};\n\n/**\n *\n * @param {String} key\n * @param {Object} data\n * @returns {String} - if a responder then 'Yes' else 'No'\n */\nconst calculateResponder = (key, data) => {\n    if (key === 'kl') {\n        return data.kl_p_value < 0.05 ? 'Yes' : 'No';\n    } else if (key === 'auc') {\n        return data.responder_from_AUC === true ? 'Yes' : 'No';\n    } else if (key === 'average_angle') {\n        return data.responder_from_response_angle === true ? 'Yes' : 'No';\n    } else if (key === 'tgi') {\n        return data.tgi > 0.6 ? 'Yes' : 'No';\n    } else if (key === 'mRECIST') {\n        const countPD = 0;\n        const dataMid = Object.keys(data.mRECIST_control).length / 2;\n        Object.values(data.mRECIST_control).forEach(res => {\n            if (res === 'PD') {\n                countPD += 1;\n            }\n        });\n        return countPD < dataMid ? 'Yes' : 'No';\n    }\n};\n\nconst parseData = data =>\n    values.map(object => {\n        return {\n            name: object.value,\n            estimate: calculateEstimate(object, data),\n            'p-value':\n                object.key === 'kl' ? data.kl_p_value.toExponential(1) : '',\n            responder: calculateResponder(object.key, data)\n        };\n    });\n\nconst BatchStatsTable = ({ data }) => (\n    <AnalysisTable data={parseData(data)} columns={columns} type=\"batch\" />\n);\n\nexport default BatchStatsTable;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { exportComponentAsPNG } from 'react-component-export-image';\nimport colors from '../../styles/colors';\nimport downloadIcon from '../../images/download1.svg';\n\nconst StyledButton = styled.div`\n    font-weight: 500;\n    display: flex;\n    justify-content: flex-end;\n    align-items: flex-end;\n    \n    button {\n      background-color: ${colors.main} !important;\n      color: white !important;\n      padding: 6px !important;\n      padding-left: 10px !important;\n      margin-right: 5px;\n      border-radius: 6px;\n      border: 0px;\n      font-size: 1.0em;\n      :hover {\n        color: ${colors.main} !important;\n        background-color: ${colors.gray_bg} !important;\n        cursor: pointer;\n      }\n    }\n    img {\n        display: inline-block;\n        height: 18px;\n        width: 25px;\n    }\n`;\n\nconst DownloadButton = (props) => {\n    const { componentRef } = props;\n    return (\n        <StyledButton>\n            <button onClick={() => exportComponentAsPNG(componentRef)} type=\"button\">\n                Export as PNG\n                <img src={downloadIcon} alt=\"download icon\" />\n            </button>\n        </StyledButton>\n    );\n};\n\nexport default DownloadButton;\n","/* eslint-disable max-len */\n/* eslint-disable no-shadow */\n/* eslint-disable func-names */\n/* eslint-disable no-extend-native */\n/* eslint-disable class-methods-use-this */\n/* eslint-disable no-plusplus */\nimport React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport PropTypes from 'prop-types';\nimport DownloadButton from '../DownloadButton/DownloadButton';\nimport colors from '../../styles/colors';\n\n// this will initialize a tooltip.\nconst initializeToolTop = () => d3.select('.wrapper')\n    .append('div')\n    .style('position', 'absolute')\n    .style('visibility', 'hidden')\n    .style('border', 'solid')\n    .style('border-width', '1px')\n    .style('border-radius', '5px')\n    .style('padding', '5px')\n    .style('max-width', '250px')\n    .style('max-height', '180px')\n    .attr('top', 10)\n    .attr('left', 20);\n\n// this function will append the data to the tooltip.\nconst createToolTip = (d, type, tooltip) => {\n    // tooltip on mousever setting the div to visible.\n    tooltip\n        .style('visibility', 'visible');\n\n    // tooltip grabbing event.pageX and event.pageY\n    // and set color according to the ordinal scale.\n    const tooltipDiv = tooltip\n        .style('left', `${d3.event.pageX + 10}px`)\n        .style('top', `${d3.event.pageY + 10}px`)\n        .style('color', '#000000')\n        .style('background-color', '#ffffff');\n\n    // tooltip data.\n    let tooltipData = [];\n    if (type === 'line') {\n        tooltipData = [\n            `Model: ${d.model}`, `Drug: ${d.drug}`, `Type: ${d.exp_type}`, `Batch: ${d.batch}`,\n        ];\n    } else if (type === 'dot') {\n        tooltipData = [\n            `Time: ${d.time} days`, `Volume: ${d.volume} mm³`,\n        ];\n    }\n    // append the data.\n    tooltipDiv.selectAll('textDiv')\n        .data(tooltipData)\n        .enter()\n        .append('div')\n        .attr('id', 'tooltiptext')\n        .html((d) => {\n            const data = d.split(':');\n            return `<b>${data[0]}</b>: ${data[1]}`;\n        })\n        .attr('x', `${d3.event.pageX + 10}px`)\n        .attr('y', (d, i) => (`${d3.event.pageY + 10 + i * 10}px`));\n};\n\n// calculating the min max volume and time.\nconst calculateMinMax = (data) => {\n    // calculating max time, min/max volumes of all data\n    const maxTimeArray = [];\n    const minTimeArray = [];\n    const minVolArray = [];\n    const maxVolArray = [];\n    const maxVolNormArray = [];\n    const minVolNormArray = [];\n\n    // looping through data to get max and min array.\n    for (let i = 0; i < data.length; i++) {\n        maxTimeArray.push(d3.max(data[i].pdx_points[0].times));\n        minTimeArray.push(d3.min(data[i].pdx_points[0].times));\n        minVolArray.push(d3.min(data[i].pdx_points[0].volumes));\n        maxVolArray.push(d3.max(data[i].pdx_points[0].volumes));\n        maxVolNormArray.push(d3.max(data[i].pdx_points[0].volume_normals));\n        minVolNormArray.push(d3.min(data[i].pdx_points[0].volume_normals));\n    }\n\n    // max and min value.\n    const minTime = Math.max.apply(null, minTimeArray);\n    const maxTime = Math.max.apply(null, maxTimeArray);\n    const minVolume = Math.min.apply(null, minVolArray);\n    const maxVolume = Math.max.apply(null, maxVolArray);\n    const maxVolNorm = Math.max.apply(null, maxVolNormArray);\n    const minVolNorm = Math.min.apply(null, minVolNormArray);\n\n    return {\n        minTime, maxTime, minVolume, maxVolume, maxVolNorm, minVolNorm,\n    };\n};\n\n// this function will return all the unqiue time points for control and treatment.\nconst getUnionOfTimepoints = (data) => {\n    let control = [];\n    let treatment = [];\n\n    for (let i = 0; i < data.length; i++) {\n        if (data[i].exp_type === 'control') {\n            const time = data[i].pdx_points[0].times;\n            control = [...control, ...time];\n        } else if (data[i].exp_type === 'treatment') {\n            const time = data[i].pdx_points[0].times;\n            treatment = [...treatment, ...time];\n        }\n    }\n\n    // unique sorted list of time points.\n    const uniqueControl = [...new Set(control)].sort((a, b) => a - b);\n    const uniqueTreatment = [...new Set(treatment)].sort((a, b) => a - b);\n\n    // return the list.\n    return [uniqueControl, uniqueTreatment];\n};\n\n// to calculate new mean volume object.\nconst volumeObject = (i, oldVolume, oldTime, volume, timeUnionData) => {\n    const newVolume = volume;\n    let z = i;\n    timeUnionData.forEach((time) => {\n        if ((time === oldTime[z]) && !newVolume[time]) {\n            newVolume[time] = {};\n            newVolume[time].totalVolume = oldVolume[z];\n            newVolume[time].number = 1;\n            newVolume[time].minVol = oldVolume[z];\n            newVolume[time].maxVol = oldVolume[z];\n            newVolume[time].volume = [];\n            newVolume[time].volume.push(oldVolume[z]);\n            z++;\n        } else if ((time === oldTime[z]) && newVolume[time]) {\n            newVolume[time].totalVolume += oldVolume[z];\n            newVolume[time].number += 1;\n            newVolume[time].minVol = newVolume[time].minVol > oldVolume[z] ? oldVolume[z] : newVolume[time].minVol;\n            newVolume[time].maxVol = newVolume[time].maxVol < oldVolume[z] ? oldVolume[z] : newVolume[time].maxVol;\n            newVolume[time].volume.push(oldVolume[z]);\n            z++;\n        } else if (oldTime[z]) {\n            const current = oldVolume[z - 1] + ((oldVolume[z] - oldVolume[z - 1]) / (oldTime[z] - oldTime[z - 1])) * (time - oldTime[z - 1]);\n            if (!newVolume[time]) {\n                newVolume[time] = {};\n                newVolume[time].totalVolume = 0;\n                newVolume[time].minVol = 10000;\n                newVolume[time].maxVol = 0;\n                newVolume[time].volume = [];\n            }\n            newVolume[time].totalVolume += current;\n            newVolume[time].number = newVolume[time].number ? newVolume[time].number + 1 : 1;\n            newVolume[time].minVol = newVolume[time].minVol > current ? current : newVolume[time].minVol;\n            newVolume[time].maxVol = newVolume[time].maxVol < current ? current : newVolume[time].maxVol;\n            newVolume[time].volume.push(current);\n        }\n    });\n};\n\n// to calculate mean volume, standard error.\nconst meanVolumeError = (newVolume, isErrorBar, exptype, data) => {\n    // calculating the number of controls/treatments.\n    let control = 0;\n    let treatment = 0;\n    data.forEach((val) => {\n        if (val.exp_type === 'control') {\n            control += 1;\n        } else {\n            treatment += 1;\n        }\n    });\n    const typeNumber = exptype === 'control' ? control : treatment;\n\n    // median volume.\n    // meanVolume = Object.keys(newVolume).map((element) => (d3.deviation(newVolume[element].volume) / (newVolume[element].volume.length)));\n    const meanVolume = [];\n    const yStandardError = [];\n    const times = [];\n    let isvolumePointsMoreThanTwo = false;\n    Object.keys(newVolume).forEach((element) => {\n        isvolumePointsMoreThanTwo = newVolume[element].volume.length > 1;\n        if (isvolumePointsMoreThanTwo || (isErrorBar && typeNumber === 1)) {\n            // volume.\n            meanVolume.push(d3.mean(newVolume[element].volume));\n            // standard error.\n            const deviation = d3.deviation(newVolume[element].volume);\n            const error = Math.sqrt(newVolume[element].volume.length - 1);\n            yStandardError.push(deviation / error);\n            // time.\n            times.push(element);\n        }\n    });\n\n    return [\n        meanVolume,\n        yStandardError,\n        times,\n        typeNumber,\n    ];\n};\n\n// plotting the error bars.\nconst plotErrorBars = (exp, times, newVolume, meanVolume, svg, xrange, yrange, yStandardError) => {\n    const errorBars = svg.append('g')\n        .attr('id', 'errorBars');\n\n    const errorMidBar = errorBars.selectAll('line.error')\n        .data(times);\n\n    errorMidBar.enter()\n        .append('line')\n        .attr('class', 'error')\n        .attr('stroke', () => {\n            if (exp === 'control') {\n                return `${colors.tussock}`;\n            }\n            return `${colors.main}`;\n        })\n        .attr('stroke-width', 2)\n        .attr('x1', (d) => xrange(d))\n        .attr('x2', (d) => xrange(d))\n        .attr('y1', (d, i) => yrange(meanVolume[i] + yStandardError[i]))\n        .attr('y2', (d, i) => yrange(meanVolume[i] - yStandardError[i]));\n\n    const errorTopBar = errorBars.selectAll('line.errorTop')\n        .data(times);\n\n    errorTopBar.enter()\n        .append('line')\n        .attr('class', 'errorTop')\n        .attr('stroke', () => {\n            if (exp === 'control') {\n                return `${colors.tussock}`;\n            }\n            return `${colors.main}`;\n        })\n        .attr('stroke-width', 2)\n        .attr('x1', (d) => xrange(d) - 4)\n        .attr('x2', (d) => xrange(d) + 4)\n        .attr('y1', (d, i) => yrange(meanVolume[i] + yStandardError[i]))\n        .attr('y2', (d, i) => yrange(meanVolume[i] + yStandardError[i]));\n\n    const errorBotBar = errorBars.selectAll('line.errorBot')\n        .data(times);\n\n    errorBotBar.enter()\n        .append('line')\n        .attr('class', 'errorBot')\n        .attr('stroke', () => {\n            if (exp === 'control') {\n                return `${colors.tussock}`;\n            }\n            return `${colors.main}`;\n        })\n        .attr('stroke-width', 2)\n        .attr('x1', (d) => xrange(d) - 4)\n        .attr('x2', (d) => xrange(d) + 4)\n        .attr('y1', (d, i) => yrange(meanVolume[i] - yStandardError[i]))\n        .attr('y2', (d, i) => yrange(meanVolume[i] - yStandardError[i]));\n};\n\n// setting up the svg and axis.\nconst tumorCurve = (data, plotId, minmax) => {\n    // expression types.\n    const expTypes = ['control', 'treatment'];\n\n    // positioning variables\n    const margin = {\n        top: 30,\n        right: 110,\n        bottom: 50,\n        left: 80,\n    };\n    const width = 520;\n    const height = 550;\n\n    // make the svg element\n    const svg = d3.select('#svg-curve')\n        .append('svg')\n        .attr('id', `pdx${plotId}`)\n        .attr('xmlns', 'http://www.w3.org/2000/svg')\n        .attr('xmlns:xlink', 'http://www.w3.org/1999/xlink')\n        .attr('width', width + margin.left + margin.right)\n        .attr('height', height + margin.top + margin.bottom)\n        .append('g')\n        .attr('transform', `translate(${margin.left},${margin.top})`);\n\n    // legend\n    const legend = svg.selectAll('.legend')\n        .data(expTypes)\n        .enter();\n\n    legend.append('circle')\n        .attr('id', (d, i) => `legend-dot-${expTypes[i]}`)\n        .attr('class', 'legend')\n        .attr('r', 5)\n        .attr('fill', (d, i) => {\n            if (expTypes[i] === 'control') {\n                return `${colors.tussock}`;\n            }\n            return `${colors.main}`;\n        })\n        .attr('cx', width + 30)\n        .attr('cy', (d, i) => height / 2 - 50 + (i * 50));\n\n    legend.append('text')\n        .attr('id', (d, i) => `legend-text-${expTypes[i]}`)\n        .attr('class', 'legend')\n        .attr('fill', 'black')\n        .style('font-size', '14px')\n        .attr('x', width + 40)\n        .attr('y', (d, i) => height / 2 - 45 + (i * 50))\n        .text((d, i) => expTypes[i]);\n\n    // set domain and range scaling\n    const xrange = d3.scaleLinear()\n        .domain([minmax.minTime, minmax.maxTime])\n        .range([0, width]);\n\n    const yrange = d3.scaleLinear()\n        .domain([0, minmax.maxVolume])\n        .range([height, 0])\n        .nice();\n\n    // set axes for graph\n    const xAxis = d3.axisBottom()\n        .scale(xrange)\n        .tickPadding(2);\n\n    const yAxis = d3.axisLeft()\n        .scale(yrange)\n        .tickPadding(2);\n\n    // Add the X Axis\n    svg.append('g')\n        .attr('class', 'x axis')\n        .attr('transform', `translate(0,${yrange(0)})`)\n        .attr('fill', 'none')\n        .attr('stroke', 'black')\n        .attr('stroke-width', 1)\n        .call(xAxis);\n\n    // X axis label\n    svg.append('text')\n        .attr('text-anchor', 'middle')\n        .attr('fill', 'black')\n        .attr('transform', `translate(${width / 2},${height + 40})`)\n        .attr('font-size', '14px')\n        .text('Time (days)');\n\n    // Add the Y Axis\n    const yAxisAdd = svg.append('g')\n        .attr('class', 'y axis')\n        .attr('fill', 'none')\n        .attr('stroke', 'black')\n        .attr('stroke-width', 1)\n        .call(yAxis);\n\n    // Y axis label\n    svg.append('text')\n        .attr('text-anchor', 'middle')\n        .attr('fill', 'black')\n        .attr('id', 'volume-text')\n        .attr('transform', `translate(${-60},${height / 2})rotate(-90)`)\n        .attr('font-size', '14px')\n        .text('Volume (mm³)');\n\n    // remove strokes for all ticks\n    svg.selectAll('.tick').select('text')\n        .attr('fill', 'black')\n        .attr('stroke', 'none')\n        .attr('font-size', '14px');\n\n    const graph = svg.append('g')\n        .attr('id', 'curves');\n\n    return {\n        graph, xrange, yrange, width, height, svg,\n    };\n};\n\n// plot the mean of each experiment type (control, treatment)\nconst plotMeans = (data, svg, xrange, yrange, isNormal, isErrorBar, isPlotMean) => {\n    // calling getUnionOfTimepoints to get all the timepoints.\n    const timeUnion = getUnionOfTimepoints(data);\n    let expTypes = [];\n    const { batch } = data[0]; // there are no batches.\n\n    // if there is no control\n    if (timeUnion[0].length === 0) {\n        expTypes = ['treatment'];\n        timeUnion.shift();\n    } else if (timeUnion[1].length === 0) { // no treatment\n        expTypes = ['control'];\n        timeUnion.pop();\n    } else {\n        expTypes = ['control', 'treatment'];\n    }\n\n    // object of the volume with number of occurences(control/treatment).\n    const newVolumeControl = {};\n    const newVolumeTreatment = {};\n\n    data.forEach((val) => {\n        const z = 0;\n        const oldVolume = isNormal ? val.pdx_points[0].volume_normals : val.pdx_points[0].volumes;\n        const oldTime = val.pdx_points[0].times;\n        const newVolume = val.exp_type === 'control' ? newVolumeControl : newVolumeTreatment;\n        const timeUnionData = val.exp_type === 'control' ? timeUnion[0] : timeUnion[1];\n        // calling function to create a new volume object.\n        volumeObject(z, oldVolume, oldTime, newVolume, timeUnionData);\n    });\n\n    for (let n = 0; n < expTypes.length; n++) {\n        const exp = expTypes[n];\n        // assigining the volume based on the control or treatment.\n        const newVolume = expTypes[n] === 'control' ? newVolumeControl : newVolumeTreatment;\n\n        // calulating mean volume, standard error and times.\n        const [meanVolume, yStandardError, times, number] = meanVolumeError(newVolume, isErrorBar, expTypes[n], data);\n\n        // plot mean charts.\n        if (isPlotMean) {\n            // mean svg\n            const meanSvg = svg.append('g')\n                .attr('id', `mean_${expTypes[n]}`);\n\n            const meanDots = meanSvg.selectAll('.mean-dot')\n                .data(meanVolume)\n                .enter();\n\n            meanDots.append('circle')\n                .attr('id', `mean-dot-${expTypes[n]}-${batch}`)\n                .attr('class', `mean-dot ${batch}`)\n                .attr('r', 4)\n                .attr('fill', () => {\n                    if (expTypes[n] === 'control') {\n                        return `${colors.tussock}`;\n                    }\n                    return `${colors.main}`;\n                })\n                .attr('cx', (d, i) => xrange(times[i]))\n                .attr('cy', (d, i) => yrange(meanVolume[i]));\n\n            const meanPath = meanSvg.selectAll('.mean-path')\n                .data(meanVolume)\n                .enter();\n\n            const linepath = d3.line()\n                .x((d, i) => xrange(timeUnion[n][i]))\n                .y((d, i) => yrange(meanVolume[i]));\n\n            meanPath.append('path')\n                .attr('id', `mean-path-${expTypes[n]}-${batch}`)\n                .attr('class', `mean-path ${batch}`)\n                .attr('d', linepath(meanVolume))\n                .attr('fill', 'none')\n                .style('opacity', 0.2)\n                .attr('stroke', () => {\n                    if (expTypes[n] === 'control') {\n                        return `${colors.tussock}`;\n                    }\n                    return `${colors.main}`;\n                })\n                .attr('stroke-width', 2);\n        }\n\n        // plot error bars\n        if (isErrorBar && number > 1) {\n            plotErrorBars(exp, times, newVolume, meanVolume, svg, xrange, yrange, yStandardError);\n        }\n    }\n};\n\nconst plotBatch = (data, graph, xrange, yrange, tooltip, norm) => {\n    // to replace all the periods with dashes because dots interfere with classes\n    const models = graph.selectAll('g.model')\n        .data(data)\n        .enter()\n        .append('g')\n        .attr('class', 'model');\n\n    const paths = graph.selectAll('.model-path')\n        .data(() => data)\n        .enter();\n\n    // line function, to join dots\n    const linepath = d3.line()\n        .x((d) => xrange(d.time))\n        .y((d) => {\n            if (norm) {\n                return yrange(d.volume_normal);\n            }\n            return yrange(d.volume);\n        });\n\n    // creating line.\n    const createLine = (stroke, opacity, color = `${colors.tussock}`) => (\n        paths.append('path')\n            .attr('id', (d) => `path-${d.model.replace(/\\./g, ' ').replace(/\\s/g, '-')}`)\n            .attr('class', (d) => `model-path_${d.exp_type}`)\n            .attr('d', (d) => linepath(d.pdx_json))\n            .attr('fill', 'none')\n            .style('opacity', opacity)\n            .attr('stroke', (d) => {\n                if (color === 'white') {\n                    return color;\n                }\n                if (d.exp_type === 'control') {\n                    return `${colors.tussock}`;\n                }\n                return `${colors.main}`;\n            })\n            .attr('stroke-width', stroke)\n    );\n\n    // selecting and unselecting the table data.\n    const tableSelect = (d, stroke, opacity, tcolor, tback, acolor, aback) => {\n        d3.select(`#path-${d.model.replace(/\\./g, ' ').replace(/\\s/g, '-')}`)\n            .attr('stroke-width', stroke)\n            .style('opacity', opacity);\n        d3.selectAll(`.responsetable_${d.model.replace(/\\./g, '_')}`)\n            .selectAll('td')\n            .style('color', tcolor)\n            .style('background', tback);\n        d3.selectAll(`.responsetable_${d.model.replace(/\\./g, '_')}`)\n            .selectAll('a')\n            .style('color', acolor)\n            .style('background', aback);\n    };\n\n    // add line\n    createLine(3, 0.7)\n        .attr('stroke-dasharray', ('3', '3'));\n\n    // create a white line to let user hover over with opacity 0 and event listeners.\n    createLine(4, 0, 'white')\n        .on('mouseover', (d) => {\n            // creating tooltip.\n            createToolTip(d, 'line', tooltip);\n            // changing attributes of the line on mouseover.\n            tableSelect(d, 5, 1.0, '#f5f5f5', `${colors.main}`, '#f5f5f5', `${colors.main}`);\n        })\n        .on('mouseout', (d) => {\n            // remove all the divs with id tooltiptext.\n            d3.selectAll('#tooltiptext').remove();\n            // tooltip on mousever setting the div to hidden.\n            tooltip\n                .style('visibility', 'hidden');\n            // changing attributes back to normal of the line on mouseout.\n            if (!(d3.select(`#path-${d.model.replace(/\\./g, ' ').replace(/\\s/g, '-')}`).classed('selected'))) {\n                tableSelect(d, 3, 0.7, `${colors.tussock}`, 'white', `${colors.main}`, 'white');\n            }\n        })\n        .on('click', (d) => {\n            d3.event.preventDefault();\n            let selectedCurve = false;\n            const selection = d3.select(`#path-${d.model.replace(/\\./g, ' ').replace(/\\s/g, '-')}`);\n            // select all the path elements and deselect them.\n            // multiple selections in case of ctrl or command key.\n            if (!(d3.event.ctrlKey || d3.event.metaKey)) {\n                d3.selectAll('path').nodes().forEach((val) => {\n                    if (val.attributes[5] && val.style.opacity !== '0' && val.classList.contains('selected')) {\n                        val.attributes[5].value = 3;\n                        val.style.opacity = 0.7;\n                        const previousSelection = d3.select(`.${val.classList[0]}`);\n                        const model = previousSelection.data()[0];\n                        previousSelection.classed('selected', false);\n                        tableSelect(model, 3, 0.7, `${colors.tussock}`, 'white', `${colors.main}`, 'white');\n                        if (val.classList[0] === selection.attr('class')) {\n                            selectedCurve = true;\n                        }\n                    }\n                });\n            }\n\n            // highlight and classed according to selection.\n            if (!(selection.classed('selected')) && !selectedCurve) {\n                selection.classed('selected', true);\n                tableSelect(d, 5, 1.0, '#f5f5f5', `${colors.main}`, '#f5f5f5', `${colors.main}`);\n            } else if (selection.classed('selected')) {\n                selection.classed('selected', false);\n                tableSelect(d, 3, 0.7, `${colors.tussock}`, 'white', `${colors.main}`, 'white');\n            }\n        });\n\n    // plotting the dots\n    const dots = models.selectAll('.model-dot')\n        .data((d) => d.pdx_json)\n        .enter();\n\n    // appends dots.\n    dots.append('circle')\n        .attr('id', (d, i) => `dot-${d.model.replace(/\\./g, ' ').replace(/\\s/g, '-')}-${\n            d.exp_type}${i}`)\n        .attr('class', (d) => `model-dot_${d.exp_type}`)\n        .attr('r', 4)\n        .attr('fill', (d) => {\n            if (d.exp_type === 'control') {\n                return `${colors.tussock}`;\n            }\n            return `${colors.main}`;\n        })\n        .style('opacity', 1.0)\n        .attr('cx', (d) => xrange(d.time))\n        .attr('cy', (d) => {\n            if (norm) {\n                return yrange(d.volume_normal);\n            }\n            return yrange(d.volume);\n        })\n        .on('mouseover', (d) => {\n            // create tooltip.\n            createToolTip(d, 'dot', tooltip);\n        })\n        .on('mouseout', () => {\n            // remove all the divs with id tooltiptext.\n            d3.selectAll('#tooltiptext').remove();\n            // tooltip on mousever setting the div to hidden.\n            tooltip\n                .style('visibility', 'hidden');\n        });\n\n    // calling plotMeans to plot the mean function.\n    plotMeans(data, graph, xrange, yrange, norm, false, true);\n};\n\n// toggle to show each model\nconst volumeToggle = (data, svg, xrange, width, height, maxVolume, maxVolNorm, minVolNorm, tooltip) => {\n    const toggleValues = ['allCurves', 'allCurvesText', 'errorBar', 'errorBarText', 'volRaw', 'volNorm', 'volRawText', 'volNormText'];\n    let isNormalized = false;\n    let isErrorBar = false;\n\n    // to create the rectangle and\n    function createReactangle(additionalHeight, color, id, val, text, extraWidth, extraHeight) {\n        let rect = '';\n        switch (val) {\n        case 'volRaw':\n        case 'volNorm':\n        case 'errorBar':\n        case 'allCurves':\n            rect = svg.append('rect')\n                .attr('x', width + 25)\n                .attr('y', height / 2 + additionalHeight)\n                .attr('width', 70)\n                .attr('height', 20)\n                .attr('fill', color)\n                .style('opacity', 0.8)\n                .attr('id', id);\n            break;\n        case 'volRawText':\n        case 'volNormText':\n        case 'errorBarText':\n        case 'allCurvesText':\n            rect = svg.append('text')\n                .attr('fill', 'black')\n                .style('font-size', '12px')\n                .attr('text-anchor', val === 'volRawText' ? 'middle' : 'null')\n                .attr('id', id)\n                .attr('x', width + extraWidth)\n                .attr('y', height / 2 + extraHeight)\n                .text(text);\n            break;\n        default:\n            console.log('It\\'s not available');\n        }\n        return rect;\n    }\n\n    function calcMinMax(isNormalized, minVolNorm, maxVolNorm, maxVolume) {\n        let minimum = 0;\n        let maximum = 0;\n\n        if (isNormalized) {\n            minimum = minVolNorm - 1;\n            maximum = maxVolNorm + 1;\n        } else {\n            minimum = 0;\n            maximum = maxVolume;\n        }\n\n        return [minimum, maximum];\n    }\n\n    function checkIfNormalized(val) {\n        let isNormalized = false;\n        // checks if it's normalized data or not.\n        if (val.match(/(volNorm|volNormText)/g)) {\n            isNormalized = true;\n        }\n        return isNormalized;\n    }\n\n    function calculateNormalizedRange(isNormalized, minVolNorm, maxVolNorm, maxVolume) {\n        // min and max value for thee scale.\n        const [minimum, maximum] = calcMinMax(isNormalized, minVolNorm, maxVolNorm, maxVolume);\n        // scale for y-axis.\n        const yrange = d3.scaleLinear()\n            .domain([minimum, maximum])\n            .range([height, 0])\n            .nice();\n\n        return yrange;\n    }\n\n    toggleValues.forEach((val) => {\n        // setting the initial variables.\n        let additionalHeight = 50;\n        let color = `${colors.tussock}`;\n        let id = '';\n        let rawToggle = `${colors.main}`;\n        let normToggle = 'lightgray';\n        let allToggle = `${colors.tussock}`;\n        let errorToggle = 'lightgray';\n        let minimum = 0;\n        let maximum = maxVolume;\n        let text = '';\n        let extraWidth = 29;\n        let extraHeight = 84;\n        let rect = '';\n\n        // switching based on the toggle value.\n        switch (val) {\n        case 'errorBar':\n        case 'errorBarText':\n            additionalHeight = 70;\n            color = 'lightgray';\n            id = val === 'errorBar' ? 'errorBar' : 'errorBarText';\n            text = val === 'errorBarText' ? 'ErrorBars' : '';\n            extraWidth = 34;\n            allToggle = 'lightgray';\n            errorToggle = `${colors.tussock}`;\n            break;\n\n        case 'allCurves':\n            id = 'allCurves';\n            break;\n\n        case 'allCurvesText':\n            id = 'allCurvesText';\n            text = 'All Curves';\n            extraWidth = 32;\n            extraHeight = 64;\n            break;\n\n        case 'volRaw':\n            additionalHeight = 120;\n            id = 'volRawToggle';\n            color = `${colors.main}`;\n            break;\n\n        case 'volRawText':\n            id = 'volRawText';\n            text = 'Raw';\n            extraWidth = 60;\n            extraHeight = 134;\n            break;\n\n        case 'volNorm':\n            additionalHeight = 141;\n            id = 'volNormToggle';\n            color = 'lightgray';\n            minimum = minVolNorm - 1;\n            maximum = maxVolNorm + 1;\n            rawToggle = 'lightgray';\n            normToggle = `${colors.main}`;\n            break;\n\n        case 'volNormText':\n            id = 'volNormText';\n            text = 'Normalized';\n            extraWidth = 28;\n            extraHeight = 155;\n            minimum = minVolNorm - 1;\n            maximum = maxVolNorm + 1;\n            rawToggle = 'lightgray';\n            normToggle = `${colors.main}`;\n            break;\n\n        default:\n            id = 'Looking for what??';\n        }\n\n        // create rectangles/toggle bars.\n        rect = createReactangle(additionalHeight, color, id, val, text, extraWidth, extraHeight);\n\n        // on click handler.\n        rect.on('click', () => {\n            console.log(val);\n            // changing the text on y axis.\n            if (val.match(/(volNorm|volNormText)/)) {\n                d3.select('#volume-text')\n                    .text('Normalized volume (mm³)');\n            } else if (val.match(/(volRaw|volRawText)/)) {\n                d3.select('#volume-text')\n                    .text('Volume (mm³)');\n            }\n            // y range variable.\n            let yrange = calculateNormalizedRange(isNormalized, minVolNorm, maxVolNorm, maxVolume);\n            // conditioning.\n            if (val.match(/(allCurves|allCurvesText|errorBar|errorBarText)/g)) {\n                // if error bar selection the set the variable.\n                if (val.match(/(errorBar|errorBarText)/g)) {\n                    isErrorBar = true;\n                } else {\n                    isErrorBar = false;\n                }\n                // unselect the data from the table.\n                d3.selectAll('tr').nodes().forEach((val) => {\n                    if (val.className) {\n                        d3.select(`.${val.className}`)\n                            .selectAll('td')\n                            .style('color', `${colors.tussock}`)\n                            .style('background', 'white');\n                        d3.select(`.${val.className}`)\n                            .selectAll('a')\n                            .style('color', `${colors.main}`)\n                            .style('background', 'white');\n                    }\n                });\n                // changing toggle color.\n                d3.select('#errorBar').attr('fill', errorToggle);\n                d3.select('#allCurves').attr('fill', allToggle);\n            } else {\n                // normlized or not.\n                isNormalized = checkIfNormalized(val);\n                // y range.\n                yrange = calculateNormalizedRange(isNormalized, minVolNorm, maxVolNorm, maxVolume);\n                // create axis/modify the axis.\n                const yAxis = d3.axisLeft()\n                    .scale(yrange)\n                    .tickPadding(2);\n                // calling to make the axis.\n                d3.selectAll('g.y.axis').call(yAxis);\n                // setting ticks.\n                svg.selectAll('.tick').select('text')\n                    .attr('fill', 'black')\n                    .attr('stroke', 'none')\n                    .attr('font-size', '14px');\n                // changing toggle color.\n                d3.select('#volRawToggle').attr('fill', rawToggle);\n                d3.select('#volNormToggle').attr('fill', normToggle);\n            }\n            // removing the other curve.\n            d3.select('#curves').remove();\n            // creeating new svg for the curve/graph.\n            const graph = svg.append('g')\n                .attr('id', 'curves');\n            // plot the toggle curve.\n            if (isErrorBar) {\n                plotMeans(data, graph, xrange, yrange, isNormalized, true, true);\n            } else {\n                plotBatch(data, graph, xrange, yrange, tooltip, isNormalized);\n            }\n        });\n    });\n};\n\n// main function to plot the growth curve.\nconst TumorGrowthCurve = (props) => {\n    const { data } = props;\n    const plotId = 'plot';\n    const componentRef = useRef();\n\n    // removing the already created plot.\n    d3.select('#pdxplot').remove();\n\n    // function will be triggered once the component is mounted/updated.\n    useEffect(() => {\n        if (data.length !== 0) {\n            const tooltip = initializeToolTop();\n            // calling function to grab the min max values.\n            const minmax = calculateMinMax(data);\n            // calling tumorCurve function passing the data, PlotID and node reference.\n            const curve = tumorCurve(data, plotId, minmax);\n            // plot each model\n            plotBatch(data, curve.graph, curve.xrange, curve.yrange, tooltip, false);\n            // toggle legend buttons.\n            volumeToggle(data, curve.svg, curve.xrange, curve.width, curve.height, minmax.maxVolume, minmax.maxVolNorm, minmax.minVolNorm, tooltip);\n        }\n    });\n\n    return (\n        <div>\n            <DownloadButton componentRef={componentRef}/>\n            <div id=\"svg-curve\" ref={componentRef} style={{float:'none !important'}}/>\n        </div>\n    );\n};\n\nTumorGrowthCurve.propTypes = {\n    data: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default TumorGrowthCurve;\n","import React, {\n    useContext,\n} from 'react';\nimport styled from 'styled-components';\nimport colors from '../../styles/colors';\nimport AnalysisContext from '../Context/AnalysisContext';\nimport ModelStatsTable from './ModelStatsTable';\nimport BatchStatsTable from './BatchStatsTable';\n// import KulgapStatsTable from './KulgapStatsTable';\nimport TumorGrowthCurve from '../GrowthCurve/TumorGrowthCurve';\n\nconst StyledAnalysis = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n\n  .analysis-header {\n    color: ${colors.main};\n    align-self: flex-start;\n    margin: 0 0 20px;\n    font-size: calc(0.5vw + 1.0em);\n    font-weight: 700;\n    text-align: center !important;\n  }\n\n  .container {\n    width: 100%;\n    background-color: white;\n    border-radius: 25px;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    padding: 20px;\n    box-sizing: border-box;\n    margin-bottom: 30px;\n    overflow: auto;\n    /* width */\n    ::-webkit-scrollbar {\n      height: 10px;\n      width: 10px;\n    }\n    /* Handle */\n    ::-webkit-scrollbar-thumb {\n      background-color: ${colors.main};\n      border-radius: 10px;\n    }\n    /* Handle on hover */\n    ::-webkit-scrollbar-thumb:hover {\n      background-color: ${colors.main_light};\n    }\n    svg {\n      display: flex;\n      margin: auto;\n    }\n  }\n`;\n\nconst Analysis = () => {\n    const { analysisState } = useContext(AnalysisContext);\n    const { data, summary } = analysisState;\n\n    return (\n        <StyledAnalysis>\n            <h2 className=\"analysis-header\">Analysis Results</h2>\n            <div className=\"container\">\n                <BatchStatsTable data={summary} />\n            </div>\n            <div className=\"container\">\n                <TumorGrowthCurve data={data} patientParam=\"unknown\" drugParam=\"unknow\" />\n            </div>\n            <div className=\"container\">\n                <ModelStatsTable data={summary} />\n            </div>\n        </StyledAnalysis>\n    );\n};\n\nexport default Analysis;\n","import React from 'react';\nimport ReactLoading from 'react-loading';\nimport styled from 'styled-components';\nimport colors from '../../styles/colors';\n\nconst StyledContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    min-width: 300px;\n    padding: 0 10px 10px;\n    margin: auto;\n    width: 150px;\n    text-align: center;\n    h3 {\n        color: ${colors.main};\n    }\n`;\n\nconst LoadingComponent = () => (\n    <StyledContainer>\n        <h3>Please wait, we are processing your data...</h3>\n        <ReactLoading type=\"spokes\" width={150} height={150} color={colors.main} />\n    </StyledContainer>\n);\n\nexport default LoadingComponent;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport FormUpload from '../FormUpload/FormUpload';\nimport Analysis from '../Analysis/Analysis';\nimport AnalysisContext from '../Context/AnalysisContext';\nimport LoadingComponent from '../utils/Loading';\nimport logo from '../../images/logo.png';\n\nfunction Home() {\n    const [analysisState, setAnalysisState] = useState({\n        data: null, summary: null, loading: false, error: null,\n    });\n    const {\n        loading, summary,\n    } = analysisState;\n    return (\n        <div className=\"App\">\n            <Link to=\"/doc\" className=\"documentation-button\">\n                <button type=\"button\"> Documentation </button>\n            </Link>\n            <AnalysisContext.Provider value={{ analysisState, setAnalysisState }}>\n                <main>\n                    <div>\n                        <a href=\"https://www.kulgap.ca\" target=\"_blank\" rel=\"noreferrer\">\n                            <img alt=\"logo\" className=\"logo\" src={logo} />\n                        </a>\n                    </div>\n                    <h3> Robust Quantification of Therapy Response in Xenografts </h3>\n                    <FormUpload />\n                    {\n                        !loading ? (\n                            <>\n                                {summary ? <Analysis /> : <div />}\n                            </>\n                        ) : <LoadingComponent />\n                    }\n                </main>\n            </AnalysisContext.Provider>\n        </div>\n    );\n}\n\nexport default Home;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport bgImg from '../../images/bg.png';\nimport colors from '../../styles/colors';\nimport input from '../../images/input.png';\nimport stats from '../../images/stats.png';\nimport model from '../../images/model.png';\nimport graph from '../../images/graph.png';\n\nconst StyledDocumentation = styled.div`\n  background: linear-gradient(\n    to right,\n    rgba(0, 0, 0, 0), \n    rgba(0, 0, 0, 0)\n  ),url('${bgImg}');\n  width: 100vw;\n  min-height: 100vh;\n  background-size: cover;\n  background-attachment: fixed;\n  background-position: center;\n\n  h2 {\n    font-size: calc(1.50vw + 1.5em);\n    margin: 0px !important;\n    padding-top: 10vh !important;\n    padding-bottom: 1vh;\n    font-weight: 600;\n  }\n\n  h3 {\n    font-size: calc(.4vw + 1.25em);\n    color: ${colors.tussock};\n    margin-left: 6vw;\n    margin-top: 40px !important;\n    text-align: left;\n    font-weight: 600;\n  }\n\n  h4 {\n    font-size: calc(.4vw + 1.0em) !important;\n    color: ${colors.main};\n    font-weight: 400;\n    margin-left: 10vw;\n    margin-right: 10vw;\n    text-align: justify;\n    margin-top: 7px;\n    margin-bottom: 0px;\n  }\n\n  ul {\n    list-style: none; /* Remove default bullets */\n  }\n\n  ul li::before {\n    content: \"\\\\2022\"; \n    color: ${colors.tussock};\n  }\n\n  li {\n    font-size: calc(.3vw + 1.0em);\n    color: ${colors.main};\n    font-weight: 400;\n    margin-left: 10vw;\n    margin-right: 10vw;\n    text-align: justify;\n  }\n\n  span {\n    color: ${colors.tussock};\n    font-weight: 500;\n  }\n`;\n\nconst outputDescription = {\n    KuLGaP: `This is our newly introduced measure. The Estimate value corresponds to the KL divergence between the Control and Treatment Gaussian Processes and the corresponding p-value.\n              The Responder fields indicates whether KuLGaP classifies the experiment as a Responder or not.`,\n    TGI: 'We show the Tumour Growth Indicator (Estimate) and the corresponding classification as a Responder or not.',\n    Angle: 'We calculate the average Angle of Response (Estimate) and the corresponding classification as a Responder or not.',\n    mRECIST: 'Here, for each Treatment arm, the mRECIST classification (mCR, mPR, mSD, mPD) and Best Average Response are shown.',\n    AUC: 'The Area under the curve is also calculated.',\n};\n\nconst Documentation = () => (\n    <StyledDocumentation>\n        <Link to=\"/\" className=\"home-button\">\n            <button type=\"button\"> Home </button>\n        </Link>\n        <h2> Documentation </h2>\n        <div>\n            <h3> Overview </h3>\n            <h4>\n                Quantifying response to drug treatment in mouse models of human cancer is challenging.\n                A preferred measure to quantify this response should ideally take into account as much of the experimental data as possible,\n                i.e. both tumor size over time and the variation among replicates. We propose such a measure, KuLGaP,\n                which is based on modelling the tumor growth curves using Gaussian processes and\n                using the Kullback-Leibler divergence to compute the difference between the treatment and a control arm.\n                We obtain a more specific measure that is able to capture the most promising therapies while reducing the risk of false positive calls.\n                <br />\n                <br />\n                This web application allows users to calculate KuLGaP as well as several other measurements of response to anti-tumour therapy.\n            </h4>\n            <h3> Input Data Format </h3>\n            <h4>\n                The input for KuLGaP is a sequence of PDX tumour growth curves. There are usually several Control and several Treatment arms.\n                It is assumed that the time axis is the same for all curves.\n                The input file should be a CSV containing a table with\n                {' '}\n                <i> C+T+1 </i>\n                , where C and T are the number of\n                {' '}\n                <i> Control </i>\n                {' '}\n                and\n                {' '}\n                <i> Treatment </i>\n                {' '}\n                arms respectively.\n                Each row corresponds to one time point, each column to one of the arms, with the first column indicating the number of days from the experiment start.\n            </h4>\n            <img src={input} className=\"images\" alt=\"Input\" />\n            <h3> Output Data </h3>\n            <h4> Several response measures are calculated: </h4>\n            <ul>\n                {\n                    Object.keys(outputDescription).map((key) => (\n                        <li>\n                            <span>\n                                {' '}\n                                {key}\n                                :\n                                {' '}\n                            </span>\n                            {outputDescription[key]}\n                        </li>\n                    ))\n                }\n            </ul>\n            <img src={stats} className=\"images\" alt=\"Stats\" />\n            <img src={model} className=\"images\" alt=\"Model Response\" />\n            <img src={graph} className=\"images\" alt=\"Growth Curve\" />\n        </div>\n    </StyledDocumentation>\n);\n\nexport default Documentation;\n","import React, { useEffect } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { Normalize } from 'styled-normalize';\nimport ReactGA from 'react-ga';\nimport GlobalStyles from './styles/GlobalStyles';\n\nimport Home from './components/Home/Home';\nimport Documentation from './components/Documentation/Documentation';\n\nconst App = () => {\n    // Google analytics setup.\n    useEffect(() => {\n        ReactGA.initialize('UA-102362625-9');\n        // To Report Page View\n        ReactGA.pageview(window.location.pathname + window.location.search);\n    }, []);\n\n    return (\n        <div>\n            <Router>\n                <Normalize />\n                <GlobalStyles />\n                <Route path=\"/\" exact component={Home} />\n                <Route path=\"/doc\" exact component={Documentation} />\n            </Router>\n        </div>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n","module.exports = __webpack_public_path__ + \"static/media/download1.f678bfa5.svg\";","module.exports = __webpack_public_path__ + \"static/media/bg.a0f497be.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5b0771bc.png\";","module.exports = __webpack_public_path__ + \"static/media/input.7652025c.png\";","module.exports = __webpack_public_path__ + \"static/media/stats.24e7ae09.png\";","module.exports = __webpack_public_path__ + \"static/media/model.18dcf9c6.png\";","module.exports = __webpack_public_path__ + \"static/media/graph.5e117501.png\";"],"sourceRoot":""}